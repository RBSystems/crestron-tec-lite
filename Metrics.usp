/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Brigham Young University
System Name: Metrics Proxy
System Number: 1.0.0
Programmer: Dan Clegg
Comments: Forwards Metrics Events
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Metrics"
#CATEGORY "46" "Metrics"
#DEFINE_CONSTANT	BIGGESTSIZE	65534
#DEFINE_CONSTANT	NEWLINE	"\n"
#DEFINE_CONSTANT	USER	"user"
#DEFINE_CONSTANT	SYSTEM	"system"
#OUTPUT_SHIFT 25
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING

/*******************************************************************************************
  DIGITAL_INPUT, ANALOG_INPUT, STRING_INPUT, BUFFER_INPUT inputs and DIGITAL_OUTPUT, 
  ANALOG_OUTPUT, STRING_OUTPUT and SERIAL_OUTPUT outputs
*******************************************************************************************/
DIGITAL_INPUT Startup_press,Confirm_System_Off,Program_Volume_Down,Program_Volume_Up,Select_AV_Jack,Select_Blank,Select_BluRay,Select_Device_Control_Bluray,Select_Device_Control_IPTV,Select_HDMI_Cable,Select_HDMI_Jack,Select_IPTV,Select_Local_Input,Select_PA_Control,Select_Remote_Input1,Select_Remote_Input2,Select_VGA_Cable,Help_Menu_Press,Home_button,Program_Volume_Slider_Press,Audio_Only_Press;

DIGITAL_INPUT _skip_,_skip_,_skip_,_skip_,_skip_;
 
DIGITAL_INPUT clientConnected,systemReady;   

STRING_INPUT dmpsHostName[32],dmpsIp[15],dmpsMACAddr[18],devBuilding[8],devRoom[16],devFloor[2],devLatitude[11],devLongitude[11],volumeLevel[4];
                               
BUFFER_INPUT clientBuffer[100];

DIGITAL_OUTPUT _clientConnected;

STRING_OUTPUT  _skip_,_skip_,_skip_,_skip_,toDevBuilding,toDevRoom,toDevFloor,toDevLat,toDevLon,toClientBuffer$;


/*******************************************************************************************
  SOCKETS
*******************************************************************************************/

TCP_CLIENT client[1024];

/*******************************************************************************************
  Structure Definitions
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

STRUCTURE QUEUEDEVENT
{
	STRING userOrSystem[15];
	STRING header1[1024],header2[1024],header3[1024],header4[1024],header5[1024],header6[1024];
	STRING innerMsg1[1024],innerMsg2[1024],innerMsg3[1024],innerMsg4[1024];
};                    



/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

SIGNED_INTEGER CONFIGFILEHANDLE;
STRING REPORTINGHOST[30],HOSTNAME[30],HOSTIP[15],HOSTMAC[18],HOSTBLDG[8],HOSTROOM[16],HOSTFLOOR[2],HOSTLAT[11],HOSTLON[11];
STRING MESSAGE[BIGGESTSIZE];
INTEGER REPORTINGHOSTPORT,RECONNECTTIME;

/*******************************************************************************************
  Functions -- No Editing
*******************************************************************************************/

Function Log(string msg)
{	
	Print("\n%s",msg);

}

Function Error(string msg)
{
	Log(msg);
}

Function Send(string msg)
{
	Print("Sending: %s",msg);
	SocketSend(client,msg);	
}

Function storeGlobalVars(string inputString)
{
	STRING trash[100],parseThisString[1024],temp[1024];
	
	// Expected Format: {"room":{"coordinates":[-111.657548,40.252619],"roomNumber":"1100J","floor":"1","building":"ITB"}}
	if((FIND("building",inputString) > 0) && (FIND("roomNumber",inputString) > 0) && (FIND("floor",inputString) > 0) && (FIND("building",inputString) > 0))
	{
		trash = Remove(":[",inputString);
		parseThisString = inputString;
		
		// Get Longitude
		HOSTLON = Remove(",",parseThisString);
		
		// Get Latitude
		HOSTLAT = Remove("],",parseThisString);
		
		// Get Room
		trash = Remove(":\"",parseThisString);
		HOSTROOM = Remove("\"",parseThisString);
		
		// Get Floor
		trash = Remove(":\"",parseThisString);
		HOSTFLOOR = Remove(",",parseThisString);
		
		//Get Building
		
		trash = Remove(":\"",parseThisString);
		temp = parseThisString;
		HOSTBLDG = Remove("\"",temp);		
	}
}
// type can be default, hostname, ip (add other types as needed
/*String_function cleanString(string $in, string type)
{
	INTEGER intType;
	STRING cleanedString[1024],temp[1024],LOWERTYPE[8],LINEFEED[4],CARRIAGE[4],TAB[4],SPACE[1],DOLLAR[4],COMMA[4],PERIOD[4],HYPHEN[4],APOSTROPHE[4];
	LINEFEED = "\x0A";
	CARRIAGE = "\x0D";
	PERIOD = "\x2E";
	LOWERTYPE = LOWER(type);
	if (LOWERTYPE = "hostname")
		intType = 1;
	else if (LOWERTYPE = "ip")
		intType = 2;
	else
		intType = 0;
		
	Print("%s - %d",LOWERTYPE,intType);
			
	cleanedString = $in;
	switch(intType)
	{
		case(1):
		{
			while ( FIND(LINEFEED,cleanedString) > 0)
			{
				Print("While LINEFEED");
				SETSTRING("",FIND(LINEFEED,cleanedString),cleanedString);
			}
			while ( FIND(CARRIAGE,cleanedString) > 0)
			{
				Print("While CARRIAGE");
				SETSTRING("",FIND(CARRIAGE,cleanedString),cleanedString);
			}
			while ( FIND(PERIOD,cleanedString) > 0)
			{
				Print("While PERIOD");
				SETSTRING("",FIND(PERIOD,cleanedString),cleanedString);
			}
		}
		default:
		{
		}	
	} 	
	
	return (cleanedString);
}*/

Function BuildHttpMessage(STRING EVENTHOSTNAME, STRING EVENTIP, STRING EVENTMAC, STRING EVENTBLDG, STRING EVENTROOM, STRING EVENTFLOOR, STRING EVENTLAT, STRING EVENTLON, STRING EVENTACTOR, string EVENTACTION, STRING userOrSystem)
{
	SIGNED_INTEGER offset,mNum,yNum,dNum,ContentLength;
    SIGNED_LONG_INTEGER PortNumber;
	STRING timestamp[24];
	STRING hostname[30];
	STRING description[256];
	STRING ipAddress[15];
	STRING mac[17];
	STRING building[8];
	STRING roomNumber[8];
	STRING lat[11];
	STRING lon[11];
	STRING flr[8];
	STRING actor[30];
	STRING desc[256];
	STRING type[6];
	STRING header1[1024],header2[1024],header3[1024],header4[1024],header5[1024],header6[1024];
	STRING innerMsg1[1024],innerMsg2[1024],innerMsg3[1024],innerMsg4[1024];
	STRING CLString[1024];
	
	hostname = EVENTHOSTNAME;
	description = "";
	ipAddress = EVENTIP;
	mac = EVENTMAC;
	building = EVENTBLDG;
	roomNumber = EVENTROOM;
	lat = EVENTLAT;
	lon = EVENTLON;
	flr = EVENTFLOOR;
	actor = EVENTACTOR;
	desc = EVENTACTION;
	type = userOrSystem;

	offset = GetGmtOffset();
	mNum = GetMonthNum();
	yNum = GetYearNum();
	dNum = GetDateNum();
	
    // !!! TODO: Build in the DST offset
	timestamp = ITOA(yNum) + "-" + ITOA(mNum) + "-"+ ITOA(dNum) +"T"+ Time() +"Z"; // YYYY-MM-DDTHH:mm:ss.SSSZ

	innerMsg1 = "{\"type\": \"" + type + "\",\"timestamp\": \"" + timestamp +"\",\"device\": {\"hostname\": \"" + hostname +"\", \"description\": \"";
	innerMsg2 = "" + description +"\", \"ipAddress\": \"" + ipAddress +"\", \"macAddress\": \"" + mac +"\"}, \"room\": { \"building\": \"" + building;
	innerMsg3 = "\", \"roomNumber\": \"" + roomNumber +"\",\"coordinates\": \"" + lat +"," + lon +"\", \"floor\": \"" + flr + "\"";
	innerMsg4 = "},\"actions\": [{\"actor\": \"" + actor +"\", \"description\": \"" + desc +"\"}]}";
	ContentLength = Len(innerMsg1) + Len(innerMsg2) + Len(innerMsg3) + Len(innerMsg4);
	CLString = ITOA(ContentLength);

	header1 = "POST events/" + userOrSystem +"/ HTTP/1.1" + NEWLINE;
	header2 = "Host: " + REPORTINGHOST + ":" + ITOA(REPORTINGHOSTPORT) + NEWLINE;
	header3 = "Connection: keep-alive" + NEWLINE;
	header4 = "Content-Length: " + CLString + NEWLINE;
	header5 = "Content-type: text/plain;charset=UTF-8" + NEWLINE;
	header6 = "Accept: */*" + NEWLINE;	
	Print("%s",header1);
	Print("%s",header1);
	Print("%s",header2);
	Print("%s",header3);
	Print("%s",header4);
	Print("%s",header5);
	Print("%s",header6);
	Print("%s",NEWLINE);
	Print("%s",innerMsg1);
	Print("%s",innerMsg2);
	Print("%s",innerMsg3);
	Print("%s",innerMsg4);

	Send(header1);
	Send(header2);
	Send(header3);
	Send(header4);
	Send(header5);
	Send(header6);
	Send(NEWLINE);
	Send(innerMsg1);
	Send(innerMsg2);
	Send(innerMsg3);
	Send(innerMsg4);
}

Function GetConfigurationValue(string field)
{
	SIGNED_INTEGER offset,mNum,yNum,dNum,ContentLength;
    SIGNED_LONG_INTEGER PortNumber;
	STRING header1[1024],header2[1024],header3[1024],header4[1024],header5[1024],header6[1024];
	STRING CLString[1024];
	ContentLength = 0;
	CLString = ITOA(ContentLength);

	header1 = "GET configuration/device/" + HOSTNAME +"?_source_include=" + field+ " HTTP/1.1" + NEWLINE;
	header2 = "Host: " + REPORTINGHOST + ":" + ITOA(REPORTINGHOSTPORT) + NEWLINE;
	header3 = "Connection: keep-alive" + NEWLINE;
	header4 = "Content-Length: " + CLString + NEWLINE;
	header5 = "Content-type: text/plain;charset=UTF-8" + NEWLINE;
	header6 = "Accept: */*" + NEWLINE;

	Send(header1);
	Send(header2);
	Send(header3);
	Send(header4);
	Send(header5);
	Send(header6);
	Send(NEWLINE);
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/******************
//
// !!! MOVE ACTIVE SIGNAL EVENTS INTO THIS SECTION !!!
//
******************/

RELEASE Startup_press // Start the session, turn system on
{  
	
	/* Designated Session Start */	
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "session", "Session START", USER);
	
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Startup_press", USER);
}

RELEASE Confirm_System_Off  // End the session, turn system off
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Confirm_System_Off", USER);
	
	/* Designated Session Start */	
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "session", "Session STOP", USER);
}

Release Program_Volume_Down // Volume Down
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Program_Volume_Down", USER);
}

Release Program_Volume_Up // Volume Down
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Program_Volume_Up", USER);
}

Release Select_Blank // Blank
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Select_Blank", USER);
}

Release Select_Device_Control_IPTV // IPTV Device Control
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Select_Device_Control_IPTV", USER);
}

Release Select_HDMI_Cable // HDMI Cable
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Select_HDMI_Cable", USER);
}

Release Select_HDMI_Jack // HDMI Jack
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Select_HDMI_Jack", USER);
}

Release Select_IPTV // IPTV Input
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Select_IPTV", USER);
}

Release Select_Local_Input // Local Input
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Select_Local_Input", USER);
}

Release Select_Remote_Input1 // Remote Input 1
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Select_Remote_Input1", USER);
}

Release Select_Remote_Input2 // Remote Input 2
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Select_Remote_Input2", USER);
}

Release Select_VGA_Cable // VGA Input
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Select_VGA_Cable", USER);
}

Release Help_Menu_Press // Help
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Help_Menu_Press", USER);
}

Release Home_button // Home
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Home_button", USER);
}

Release Select_AV_Jack // AV Jack Input
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Select_AV_Jack", USER);
}

Release Select_BluRay // Blu-ray Input
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Select_Blu-Ray", USER);
}

Release Select_Device_Control_Bluray // Device Control Blu-ray
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Select_Device_Control_Blu-Ray", USER);
}

Release Select_PA_Control // PA Control
{
	/*User Event*/
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Select_PA_Control", USER);
}

Release Program_Volume_Slider_Press // Slider volume control
{
	/* User Event */
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Program_Volume_Slider_Press", USER);
}

Release Audio_Only_Press // Audio Only button on init screen
{
	/* Designated Session Start */	
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "session", "Session START", USER);

	/* User Event */
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "touchpanel", "Audio_Only_Press", USER);
}


/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
// !!!!!!!!! MOVE INACTIVE SIGNAL EVENTS HERE !!!!!!!!!!!!!!


// !!!!!!!! SYSTEM SETUP EVENTS -- NO EDITING
// If system gets hostname, set it in the global var
CHANGE dmpsHostName
{
	STRING trash[16];
	if(FIND(" ",dmpsHostName) <= 1)
	{
		trash = REMOVE(" ",dmpsHostName); // remove preceding space if there
	}
	HOSTNAME = dmpsHostName;
}

// If system gets IP, set it in the global var
CHANGE dmpsIp
{
	STRING trash[16];
	trash = REMOVE(" ",dmpsIp);
	HOSTIP = dmpsIp;
}

// If system gets IP, set it in the global var
CHANGE dmpsMACAddr
{
	STRING trash[32],temp[32];
	if (FIND(" ",dmpsMACAddr) > 0)
	{
		temp = LEFT(dmpsMACAddr, LEN(dmpsMACAddr) - 1);
		HOSTMAC = temp;
	}
	else
	{
		HOSTMAC = dmpsMACAddr;
	}
}

// Start a socket session to handle whether a push is active or not 
PUSH clientConnected
{
 	SIGNED_INTEGER status; // variable to capture/store socket status
	status = SocketConnectClient (client, REPORTINGHOST, REPORTINGHOSTPORT, 0); // SocketConnectClient(tcpClient,host,port,reconnect)
    
	// Status < 0 is an error, greater than is a successful connection
    if (status < 0)
        Print("Error connecting socket to address %s on port  %d", REPORTINGHOST, REPORTINGHOSTPORT);
}
 

//Signal to disconnect socket has been sent
RELEASE clientConnected  
{
	SIGNED_INTEGER status;
	status = SocketDisconnectClient(client);

	if (status < 0)
		Print("Error disconnecting socket to address %s on port %d",REPORTINGHOST,REPORTINGHOSTPORT);
}

PUSH systemReady
{
	_clientConnected = 1;
	BuildHttpMessage(HOSTNAME, HOSTIP, HOSTMAC, HOSTBLDG, HOSTROOM, HOSTFLOOR, HOSTLAT, HOSTLON, "controlProcessor", "System rebooted", SYSTEM);
}

// The SOCKETCONNECT event is called when a socket connection is completed on a TCP_CLIENT or  TCP_SERVER variable.
/***********
When using the THREADSAFE keyword before an event (such as PUSH, RELEASE, CHANGE) the event is prevented from retriggering, until the entire code block in the event has executed.

Events prevented from triggering WILL be dropped.

************/
THREADSAFE SOCKETCONNECT client
{
	SIGNED_INTEGER LocalStatus,PortNumber;
	Print("OnConnect: input buffer size is: %d\n", Len(client.SocketRxBuf));

    LocalStatus = SocketGetRemoteIPAddress(client, REPORTINGHOST);
    PortNumber = SocketGetPortNumber(client);

    if (LocalStatus < 0)
        Print("Error getting remote ip address. %d\n", LocalStatus);
	else if (PortNumber < 0)
        Print("Error getting client port number. %ld\n", REPORTINGHOSTPORT);
    else
		Print("OnConnect: Connected to port %ld on address %s\n", REPORTINGHOSTPORT, REPORTINGHOST);
	
	// Starts timer to force reconnect of stale session
	WAIT (RECONNECTTIME, ReconnectTimer)
	{
		_clientConnected = 0;
		_clientConnected = 1;
	}
}

// The SOCKETDISCONNECT event is called when a TCP_CLIENT or  TCP_SERVER socket is disconnected. Determine if this was done remotely (i.e. network, remote server, etc.) or locally via this module
SOCKETDISCONNECT client
{
	if (clientConnected = 0)
		Print("Socket disconnected remotely");
	else
		Print("Local socket disconnect complete.");
	_clientConnected = 1;
	
	CancelWait(ReconnectTimer);
}

// Display the data received from the calls to the client and clear the buffer
SOCKETRECEIVE client
{
	RetimeWait(RECONNECTTIME, ReconnectTimer);
	
	//STRING received$[1024];
	//received$ = client.SocketRxBuf;
    if (Len(client.SocketRxBuf) < 256)
        Print("Rx: %s", client.SocketRxBuf);
    
    //storeGlobalVars(received$);    

    // send to serial output and clear buffer
    //clientRx = client.SocketRxBuf;
    ClearBuffer(client.SocketRxBuf);
}

// The SOCKETSTATUS event is called when the status of a TCP_CLIENT or TCP_SERVER socket changes.
SOCKETSTATUS client
{
	SIGNED_INTEGER Status;
 	Status = SocketGetStatus();
    Switch(Status)
	{
		case(0):
		{
			Log("SOCKET STATUS: Not Connected");
			//_clientConnected = 0;
		}
		case(1):
		{
			Log("SOCKET STATUS: Waiting for Connection");
		}
		case(2):
		{
			Log("SOCKET STATUS: Connected");
		}
		case(3):
		{
			Log("SOCKET STATUS: Connection Failed");
			//_clientConnected = 0;
		}
		case(4):
		{
			Log("SOCKET STATUS: Connection Broken Remotely");
			//_clientConnected = 0;
		}
		case(5):
		{
			Log("SOCKET STATUS: Connection Broken Locally");
			//_clientConnected = 0;
		}
		case(6):
		{
			Log("SOCKET STATUS: Performing DNS Lookup");
		}
		case(7):
		{
			Log("SOCKET STATUS: DNS Lookup Failed");
			//_clientConnected = 0;
		}
		case(8):
		{
			Log("SOCKET STATUS: DNS Name Resolved");
		}
		case(-1):
		{
			Log("SOCKET STATUS: Client, Server or UDP variable not a TCP/IP or UDP variable.");
			//_clientConnected = 0;
		}
		case(-2):
		{
			Log("SOCKET STATUS: Could not create the connection task");
			//_clientConnected = 0;
		}
		case(-3):
		{
			Log("SOCKET STATUS: Could not resolve address");
			//_clientConnected = 0;
		}
		case(-4):
		{
			Log("SOCKET STATUS: Port not in range of 0-65535.");
			//_clientConnected = 0;
		}
		case(-5):
		{
			Log("SOCKET STATUS: No connection has been established");
		}
		case(-6):
		{
			Log("SOCKET STATUS: Not enough room in string parameter to hold IP address.");
			//_clientConnected = 0;
		}
		default:
		{
			Log("Socket Status Undefined");
		}
	};
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // Initialize declared global and local variables/arrays

    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
    WaitForInitializationComplete();

	REPORTINGHOST = "avreports.byu.edu";
	REPORTINGHOSTPORT = 9200;
	RECONNECTTIME = 9000; // Set reconnect timer for 90 seconds.
	HOSTNAME = "";
	HOSTIP = "";
	HOSTMAC = "";
	HOSTBLDG = "";
	HOSTROOM = "";
	HOSTFLOOR = "";
	HOSTLAT = "40.249719";
	HOSTLON = "-111.649265";
    //GetConfigurationValue("room");    
	// !!!!!!!!!! TODO: Use Configuration File to store Event Host Information
	/*
	CONFIGFILEHANDLE = FileOpen ( "\\NVRAM\\EVENTTARGET.TXT", _O_RDONLY );
	if (CONFIGFILEHANDLE < 0)
	{
		PRINT("Error opening event target configuration file\n");
	}
	else {
		if ( FileClose( CONFIGFILEHANDLE ) <> 0 )
		{
			Print("Error closing file\n");
		}
	}*/
}
