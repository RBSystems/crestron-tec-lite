/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT MAXOUTPUT 96
// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE 
#ANALOG_SERIAL_EXPAND INPUTSWITHOUTPUTS  
#HELP_PDF_FILE "bss soundweb london source matrix v4.2 help.pdf"
#ENABLE_STACK_CHECKING
#HELP_BEGIN
version 4.2
see help file bss soundweb london source matrix v4.2 help.pdf
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_,_skip_, subscribe$, unSubscribe$;
BUFFER_INPUT _skip_, rx$[400];
ANALOG_INPUT _skip_, inputForOutput$[MAXOUTPUT];
             
             
STRING_OUTPUT _skip_,_skip_,_skip_,_skip_,_skip_, tx$;
ANALOG_OUTPUT _skip_, inputForOutput_fb$[MAXOUTPUT];

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/ 
INTEGER_PARAMETER iMAXOUTPUT;
STRING_PARAMETER objectID$[3];
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
//STRING_PARAMETER 

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES iMAXOUTPUT
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 96d;
   propDefaultValue = 0d; 
   #BEGIN_PROP_FULL_DESCRIPTION  
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES objectID$
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "\x00\x00\x00"; 
   //propList = {"A","A"},{"B","B"},{"C","C"},{"D","D"};  
   #BEGIN_PROP_FULL_DESCRIPTION  
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK,xOKSubscribe, i;
STRING tempString[40];

INTEGER x,xIndex, stateVar, subscribe;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

CHANGE inputForOutput$
{         
	xIndex = getLastModifiedArrayIndex();
	stateVar =  xIndex - 1;
	makeString(tx$, "\x88\x00\x00\x03%s\x00%s\x00\x00\x00%s\x03\x03\x03\x03\x03", objectID$, chr(statevar), chr(inputForOutput$[stateVar+1]));

	if(subscribe)
	{
  		makeString(tx$, "\x89\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(xIndex-1));
		processlogic();  	
	}
}
  
  
PUSH subscribe$
{
	wait(20)
	{	   
		if(xOKSubscribe)
		{
			xOKSubscribe = 0;
			for (i = 1 to iMAXOUTPUT)
			{
				makeString(tx$, "\x89\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(i-1));
				processlogic();
			}
	
			subscribe = 1;   
			xOKSubscribe = 1;
		}
	}

}


PUSH unSubscribe$
{       
	if(xOKSubscribe)
	{
		xOKSubscribe = 0;
		for (i = 1 to iMAXOUTPUT)
		{
			makeString(tx$, "\x8A\x00\x00\x03%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(i-1));
			processlogic();
		}
	
		subscribe = 0;   
		xOKSubscribe = 1;
	}

}


/*
RELEASE input
{
    // TODO:  Add code here
}
*/

CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))
				{
					inputForOutput_fb$[byte(tempString, 10)+1] = byte(tempString, 14);
				}
				clearbuffer(tempString);
			}
		}
		xOK = 1;
	}	
}
/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	xOK = 1;
	subscribe = 0; 
	xOKSubscribe = 1;
}


