/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE 
#HELP_PDF_FILE "bss soundweb london meter v4.2 help.pdf"
#ENABLE_STACK_CHECKING

#HELP_BEGIN
version 4.2 
see help file bss soundweb london meter v4.2 help.pdf
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_, subscribe$, unSubscribe$;
ANALOG_INPUT _skip_, attack$, release$, reference$; 
BUFFER_INPUT _skip_, rx$[400];
             
             
ANALOG_OUTPUT _skip_, _skip_, _skip_,_skip_, attack_fb$, release_fb$, reference_fb$;
STRING_OUTPUT _skip_, tx$;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER objectID$[3];
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
//STRING_PARAMETER 

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES objectID$
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "\x00\x00\x00"; 
   //propList = {"A","A"},{"B","B"},{"C","C"},{"D","D"};  
   #BEGIN_PROP_FULL_DESCRIPTION  
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK,xOKSubscribe, volume;
STRING tempString[40];

STRING returnString[4];

INTEGER returnI,subscribe;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

String_Function iToVolumePercent(INTEGER int)
{                 
	// number from 0 - 65535  
	volume = (int*100)/65535;                            
	returnString = "\x00" + chr(volume) + "\x00\x00";
    Return (returnString);
}


Integer_Function volumePercentToI(STRING str)
{   
	INTEGER fraction;                      
	fraction = byte(str,3)*256+byte(str,4);
	if(fraction > 32767){
		volume = ((byte(str, 2)+1)*65535)/100;                  
	}
	else{
		volume = (byte(str, 2)*65535)/100;
	}
	returnI = volume;

    Return (returnI);
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH subscribe$
{
	wait(20)
	{      
		if(xOKSubscribe)
		{
			xOKSubscribe = 0;
			makeString(tx$, "\x8E\x00\x00\x03%s\x00\x01\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //ATTACK
			processlogic();
			makeString(tx$, "\x8E\x00\x00\x03%s\x00\x02\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //RELEASE
			processlogic();
			makeString(tx$, "\x8E\x00\x00\x03%s\x00\x03\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //REFERENCE
			processlogic();
	
			subscribe = 1;   
			xOKSubscribe = 1;
		}
    }
}


PUSH unSubscribe$
{      
	if(xOKSubscribe)
	{
		xOKSubscribe = 0;

		makeString(tx$, "\x8F\x00\x00\x03%s\x00\x01\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //ATTACK
		processlogic();
		makeString(tx$, "\x8F\x00\x00\x03%s\x00\x02\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //RELEASE
		processlogic();
		makeString(tx$, "\x8F\x00\x00\x03%s\x00\x03\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //REFERENCE
		processlogic();
	
		subscribe = 0;   
		xOKSubscribe = 1;
	}

}


CHANGE attack$
{
	makeString(tx$, "\x8D\x00\x00\x03%s\x00\x01%s\x03\x03\x03\x03\x03", objectID$, iToVolumePercent(attack$));
	
	if(subscribe)
	{
			makeString(tx$, "\x8E\x00\x00\x03%s\x00\x01\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //ATTACK
			processlogic();		
	}
}
  
  
CHANGE release$
{
	makeString(tx$, "\x8D\x00\x00\x03%s\x00\x02%s\x03\x03\x03\x03\x03", objectID$, iToVolumePercent(release$));
	
	if(subscribe)
	{
			makeString(tx$, "\x8E\x00\x00\x03%s\x00\x02\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //RELEASE
			processlogic();		
	}

}
  
  
CHANGE reference$
{
	makeString(tx$, "\x8D\x00\x00\x03%s\x00\x03%s\x03\x03\x03\x03\x03", objectID$, iToVolumePercent(reference$));

	if(subscribe)
	{
			makeString(tx$, "\x8E\x00\x00\x03%s\x00\x03\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //REFERENCE
			processlogic();		
	}
}
  
  
/*
RELEASE input
{
    // TODO:  Add code here
}
*/

CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))
				{
					if(byte(tempString, 10) = 1)
					{
						attack_fb$ = volumePercentToI(mid(tempString, 11, 4));
					}
					else if (byte(tempString, 10) = 2)
					{
						release_fb$ = volumePercentToI(mid(tempString, 11, 4));
					}
					else if (byte(tempString, 10) = 3)
					{
						reference_fb$ = volumePercentToI(mid(tempString, 11, 4));					
					}			
				}
				clearbuffer(tempString);
			}
		}
		xOK = 1;
	}	
}
/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	xOK = 1;
	subscribe = 0;
	xOKSubscribe = 1;
}


