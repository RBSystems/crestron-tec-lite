/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE 
#HELP_PDF_FILE "bss soundweb london generic v4.2 help.pdf"
#ENABLE_STACK_CHECKING

#HELP_BEGIN
version 4.2 
see help file bss soundweb london generic v4.2 help.pdf
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
ANALOG_INPUT _skip_, value$;
STRING_INPUT _skip_, objectID$[3];
ANALOG_INPUT stateVariable$;

DIGITAL_INPUT subscribe$, unSubscribe$;

BUFFER_INPUT rx$[400];
// BUFFER_INPUT                 

ANALOG_OUTPUT _skip_,_skip_,_skip_, value_fb$;
STRING_OUTPUT _skip_,_skip_,_skip_, tx$;

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK, xOKSubscribe;
STRING tempString[40];  

STRING stateVariable[2];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE stateVariable$
{
	stateVariable = chr(high(stateVariable$)) + chr(low(stateVariable$));
}


CHANGE value$
{
	makeString(tx$, "\x88\x00\x00\x03%s%s\x00\x00%s%s\x03\x03\x03\x03\x03", objectID$, stateVariable, chr(high(value$)), chr(low(value$)));
}
  
  
PUSH subscribe$
{
	wait(20)
	{ 
		if(xOKSubscribe)
		{
			xOKSubscribe = 0;
			makeString(tx$, "\x89\x00\x00\x03%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, stateVariable);  //VALUE
			processlogic();  
			xOKSubscribe = 1;
		}
	}
}  


PUSH unSubscribe$
{ 
	if(xOKSubscribe)
	{
		xOKSubscribe = 0;
		makeString(tx$, "\x8A\x00\x00\x03%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, stateVariable);  //VALUE
		processlogic();  
		xOKSubscribe = 1;
	}
}  


/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))
				{                 
					if( byte(tempString, 9) = byte(stateVariable, 1) && byte(tempString, 10) = byte(stateVariable, 2) )
					{
						value_fb$ = (byte(tempString, 13) * 256) + byte(tempString, 14);
					}
				}
				clearbuffer(tempString);
			}
		}
		xOK = 1;
	}	
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	xOK = 1;
	xOKSubscribe = 1;
}


