/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: 
System Name:BSS Audio Soundweb London Room Combine
System Number:
Programmer: Scott Emery 4/1/2008
Comments:  */

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
//#SYMBOL_NAME "BSS Soundweb London Room Combine"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
#DEFAULT_NONVOLATILE 
#ANALOG_SERIAL_EXPAND INPUTSWITHOUTPUTS
#DIGITAL_EXPAND INPUTSWITHOUTPUTS 
#HELP_PDF_FILE "bss soundweb london room combine v4.2 help.pdf"
#ENABLE_STACK_CHECKING

#HELP_BEGIN 
version 4.2
This module is used to control a Room Combine Processing Object inside London Architect.   
Offset: 0 for Rm1-8; 1 for Rm9-16; 2 for Rm17-24, etc

All Mutes are toggle.  On each rising edge the mutestate will change.

Enable Feedback: While high a subscription will be sent out that will sync the Crestron to
the current state of the London.  From that point on all feedback will be real.  Once this signal 
goes low the London will not report feedback.

see help file bss soundweb london room combine v4.2 help.pdf

#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_,_skip_, Enable_Feedback$, Disable_Feedback$;
BUFFER_INPUT RX$[400];

STRING_OUTPUT _skip_, TX$;

Digital_Input _skip_,SourceMute_Rm$[8], BGM_Mute_Rm$[8], MasterMute_Rm$[8],_skip_, Partition$[8], _skip_;
ANALOG_INPUT Chan_Offset$,_skip_, SourceGain_Rm$[8], BGM_Gain_Rm$[8], MasterGain_Rm$[8], BGM_Input_Rm$[8],Group_Rm$[8];




// BUFFER_INPUT 

DIGITAL_OUTPUT _skip_,_skip_,_skip_,_skip_,_skip_, SourceMute_Rm_FB$[8], BGM_Mute_Rm_FB$[8], MasterMute_Rm_FB$[8],_skip_, Partition_FB$[8];
ANALOG_OUTPUT _skip_,_skip_, SourceGain_Rm_FB$[8], BGM_Gain_Rm_FB$[8], MasterGain_Rm_FB$[8], BGM_Input_Rm_FB$[8],Group_Rm_FB$[8];


/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER Max_Rooms$;
STRING_PARAMETER objectID$[3];
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
//STRING_PARAMETER 

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES Max_Rooms$
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 8d;
   propDefaultValue = 0d; 
   #BEGIN_PROP_FULL_DESCRIPTION  
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES objectID$
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "\x00\x00\x00"; 
   //propList = {"A","A"},{"B","B"},{"C","C"},{"D","D"};  
   #BEGIN_PROP_FULL_DESCRIPTION  
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER offset,feedback,stateVar,SV,SV_MOD,stateVarGain,stateVarSub, stateVarUnSub,x;
STRING returnString[4];
INTEGER returnI,SourceGain[8], BGM_Gain[8], MasterGain[8]; 

INTEGER xOKSourceGain[8], xOKBGM_Gain[8], xOKMasterGain[8];
INTEGER xOK,xOKFeedback,i,volume;
STRING tempString[40]; 


/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

String_Function iToVolumePercent(INTEGER int)
{                 
	// number from 0 - 65535  
	volume = (int*100)/65535;                            
	returnString = "\x00" + chr(volume) + "\x00\x00";
    Return (returnString);

}


Integer_Function volumePercentToI(STRING str)
{   
	INTEGER fraction;                      
	fraction = byte(str,3)*256+byte(str,4);
	if(fraction > 32767){
		volume = ((byte(str, 2)+1)*65535)/100;                  
	}
	else{
		volume = (byte(str, 2)*65535)/100;
	}
	returnI = volume;

    Return (returnI);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
       
Change Chan_Offset$
{
  	offset = Chan_Offset$*8;//zero for channels 1-8 (no offset ,offset = 0); offset = 1 for channels 9-16; offset = 2 for channels 17-24....
}  


PUSH Enable_Feedback$
{
	wait(20)
	{    
		if(xOKFeedback)
		{
			xOKFeedback = 0;
		 	feedback = 1;
		     
			for(i = 1 to Max_Rooms$) //subscribe to all variables for feedback
			{
			    stateVarSub = (((i+offset)-1) * 50) + 256;//SourceMute
				makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //SourceMUTE   	    
			    stateVarSub = (((i+offset)-1) * 50) + 258;//BGM Mute
				makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //BGM MUTE   	    
			    stateVarSub = (((i+offset)-1) * 50) + 254;//MasterMute
				makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //MasterMUTE   	    
		
			    stateVarSub = (((i+offset)-1) * 50) + 255;//SourceGain
				makeString(tx$, "\x8E\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//SourceGain
			    stateVarSub = (((i+offset)-1) * 50) + 257;//BGM Gain
				makeString(tx$, "\x8E\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//BGM Gain
			    stateVarSub = (((i+offset)-1) * 50) + 252;//MasterGain
				makeString(tx$, "\x8E\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//MaseterGain
		
			    stateVarSub = (((i+offset)-1) * 50) + 259;//BGM Input
				makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //BGM Input   	    
	
				stateVarSub = ((i+offset)-1);//Partition
				makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Partition
	
				stateVarSub = (((i+offset)-1) * 50) + 250;//Group
				makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Group
			}	
			xOKFeedback = 1;
		}
	}
}
         
PUSH Disable_Feedback$
{  
	if(xOKFeedback)
	{
		xOKFeedback = 0;
		feedback = 0;
		     
		for(i = 1 to Max_Rooms$) //subscribe to all variables for feedback
		{
		    stateVarSub = (((i+offset)-1) * 50) + 256;//SourceMute
			makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //SourceMUTE   	    
		    stateVarSub = (((i+offset)-1) * 50) + 258;//BGM Mute
			makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //BGM MUTE   	    
		    stateVarSub = (((i+offset)-1) * 50) + 254;//MasterMute
			makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //MasterMUTE   	    
	
		    stateVarSub = (((i+offset)-1) * 50) + 255;//SourceGain
			makeString(tx$, "\x8F\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//SourceGain
		    stateVarSub = (((i+offset)-1) * 50) + 257;//BGM Gain
			makeString(tx$, "\x8F\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//BGM Gain
		    stateVarSub = (((i+offset)-1) * 50) + 252;//MasterGain
			makeString(tx$, "\x8F\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//MaseterGain
	
		    stateVarSub = (((i+offset)-1) * 50) + 259;//BGM Input
			makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //BGM Input   	    
	
			stateVarSub = ((i+offset)-1);//Partition
			makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Partition
	
			stateVarSub = (((i+offset)-1) * 50) + 250;//Group
			makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Group
		}    
		xOKFeedback = 1;
	}    
		
}

PUSH SourceMute_Rm$
{        
	x = getLastModifiedArrayIndex();
    stateVar = (((x+offset)-1) * 50) + 256; //SVID of SourceMute
   
	if (SourceMute_Rm_FB$[x])//muted
   		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));//ummute
	else //unmute
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));//mute

	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
/*
RELEASE SourceMute$
{ //ummute       
	x = getLastModifiedArrayIndex();

	stateVar = (((x+offset)-1) * 50) + 256;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
*/

PUSH BGM_Mute_Rm$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (((x+offset)-1) * 50) + 258; //SVID of SourceMute
	
	if(BGM_Mute_Rm_FB$[x])
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));		
	else
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));

	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
/*
RELEASE BGM_Mute$
{//unmute        
	x = getLastModifiedArrayIndex();

	stateVar = (((x+offset)-1) * 50) + 258;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
*/      
 
PUSH MasterMute_Rm$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (((x+offset)-1) * 50) + 254; //SVID of SourceMute

	if(MasterMute_Rm_FB$[x])
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	else
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));

	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
/*
RELEASE MasterMute$
{//unmute        
	x = getLastModifiedArrayIndex();

	stateVar = (((x+offset)-1) * 50) + 254;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	
	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE   	    
}
*/
         
CHANGE SourceGain_Rm$
{	
    x = getLastModifiedArrayIndex();

	if(SourceGain[x] <> SourceGain_Rm$[x])
	{    
		if(xOKSourceGain[x])
		{
			xOKSourceGain[x] = 0;
			stateVar = (((x+offset)-1) * 50)+255;
    		SourceGain[x] = SourceGain_Rm$[x];
			SourceGain_Rm_FB$[x] = SourceGain_Rm$[x];
			makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(SourceGain_Rm$[x]));		
			xOKSourceGain[x] = 1;
		}
	}
}
     
CHANGE BGM_Gain_Rm$
{	
    x = getLastModifiedArrayIndex();

	if(BGM_Gain[x] <> BGM_Gain_Rm$[x])
	{    
		if(xOKBGM_Gain[x])
		{
			xOKBGM_Gain[x] = 0;
			stateVar = (((x+offset)-1) * 50)+257;
    		BGM_Gain[x] = BGM_Gain_Rm$[x];
			BGM_Gain_Rm_FB$[x] = BGM_Gain_Rm$[x];
			makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(BGM_Gain_Rm$[x]));		
			xOKBGM_Gain[x] =1;
		}
	}
}
         
CHANGE MasterGain_Rm$
{	
    x = getLastModifiedArrayIndex();

	if(MasterGain[x] <> MasterGain_Rm$[x])
	{ 
		if(xOKMasterGain[x])
		{
			xOKMasterGain[x] = 0;
			stateVar = (((x+offset)-1) * 50)+252;
    		MasterGain[x] = MasterGain_Rm$[x];
			MasterGain_Rm_FB$[x] = MasterGain_Rm$[x];
			makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(MasterGain_Rm$[x]));		
			xOKMasterGain[x] = 1;
		}
	}
}

          
CHANGE BGM_Input_Rm$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (((x+offset)-1) * 50) + 259; //SVID of SourceMute

	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)),chr(BGM_Input_RM$[x]));

	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  	    
}

PUSH Partition$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (x+offset)-1; //SVID of Partition

	if(Partition_FB$[x])
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));
	else
		makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));

	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));    	    
}

CHANGE Group_Rm$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (((x+offset)-1) * 50) + 250; //SVID of Group

	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)),chr(Group_Rm$[x]));

	if(feedback) //send subscribe (GET) string 
    	makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));    	    
}



CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))//ObjectID
				{   
					SV = ((byte(tempString, 9) * 256 ) + byte(tempString, 10)); //SV
                         
					if(SV < 49)//partition
						Partition_FB$[(SV+1-offset)] = byte(tempString,14);	//Partition	
					Else if(SV > 249)
					{		
						SV_MOD = (SV MOD 50);
   				
						Switch(SV_MOD)
						{
							Case(0):{Group_Rm_FB$[(SV-200)/50-offset] = byte(tempString,14);}//Group
        	            	Case(6):{SourceMute_Rm_FB$[(SV-206)/50-offset] = byte(tempString,14);} //Source Mute -value of SV (mute-state)
							Case(8):{BGM_Mute_Rm_FB$[(SV-208)/50-offset] = byte(tempString,14);} //BGM Mute
							Case(4):{MasterMute_Rm_FB$[(SV-204)/50-offset] = byte(tempString,14);}//Master Mute
							Case(5)://Source Gain
							{
								SourceGain[(SV-205)/50-offset]= volumePercentToI(mid(tempString, 11, 4));
								SourceGain_Rm_FB$[(SV-205)/50-offset] = SourceGain[(SV-205)/50-offset];
							}
							Case(7)://BGM Gain
							{
								BGM_Gain[(SV-207)/50-offset]= volumePercentToI(mid(tempString, 11, 4));
								BGM_Gain_Rm_FB$[(SV-207)/50-offset] = BGM_Gain[(SV-207)/50-offset];
							} 
							Case(2)://Master Gain
							{
								MasterGain[(SV-202)/50-offset]= volumePercentToI(mid(tempString, 11, 4));
								MasterGain_Rm_FB$[(SV-202)/50-offset] = MasterGain[(SV-202)/50-offset];
							} 
							Case(9)://BGM Input
							{
								BGM_Input_Rm_FB$[(SV-209)/50-offset] = byte(tempString,14);
							} 
						}//switch SV_MOD
					}//else if SV > 249					
				}//if objectID
				clearbuffer(tempString);
			}//if find
		}//while
		xOK = 1;
	}//if xOK	
}//change_RX


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{     
	feedback = 1;
	
	xOK = 1;	
	Offset = 0;
	xOKFeedback = 1; 
	for (i=1 to 8)
	{
		xOKSourceGain[i] = 1;
	}   
	for (i=1 to 8)
	{
		xOKBGM_Gain[i] = 1;
	}       
	for (i=1 to 8)
	{
		xOKMasterGain[i] = 1;
	}
}


