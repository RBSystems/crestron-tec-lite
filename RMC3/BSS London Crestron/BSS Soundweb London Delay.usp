/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE 
#HELP_PDF_FILE "bss soundweb london delay v4.2 help.pdf"
#ENABLE_STACK_CHECKING

#HELP_BEGIN
version 4.2 
see help file bss soundweb london delay v4.2 help.pdf
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_, subscribe$,unSubscribe$;

ANALOG_INPUT _skip_, delay$;
// STRING_INPUT 
BUFFER_INPUT _skip_, rx$[400];

// DIGITAL_OUTPUT 
ANALOG_OUTPUT _skip_, _skip_, _skip_,_skip_, delay_fb$;
STRING_OUTPUT _skip_, tx$;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER objectID$[3];
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
//STRING_PARAMETER 

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES objectID$
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "\x00\x00\x00"; 
   //propList = {"A","A"},{"B","B"},{"C","C"},{"D","D"};  
   #BEGIN_PROP_FULL_DESCRIPTION  
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES


/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK, xOKSubscribe;
STRING tempString[40];

STRING delayString[5];
LONG_INTEGER delayValue;
INTEGER delay1, delay2, delay3;
STRING delaySendString[4];
                        
INTEGER value_fb, decimalValue_fb, delay_Int;                        
LONG_INTEGER delayValue_fb;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE delay$
{             
	//if((delay_Int <> delay$) && ((delay_Int-1)<> delay$) && ((delay_Int+1)<> delay$))// must make these checks because the math to find the fb is sometimes off by one.
	//{
		delay_Int = delay$;
		delayString = itoa(delay_Int);
		delayValue = (atoi(right(delayString, 1)) * 96) / 10;
		delayValue = delayValue + atoi(left(delayString, len(delayString)-1)) * 96;
		delay1 = delayValue / 65536;
		delay2 = (delayValue - (delay1 * 65536)) /256;  
		delay3 = delayValue - ((delayValue / 256) * 256);                          
		delaySendString = "\x00" + chr(delay1) + chr(delay2) + chr(delay3);
		makeString(tx$, "\x88\x00\x00\x03%s\x00\x00%s\x03\x03\x03\x03\x03", objectID$, delaySendString);
		makeString(tx$, "\x89\x00\x00\x03%s\x00\x00\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);
	//}
}


PUSH subscribe$
{   
	if(xOKSubscribe)
	{
		xOKSubscribe = 0;	
		makeString(tx$, "\x89\x00\x00\x03%s\x00\x00\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //MUTE
		xOKSubscribe = 1;
	}
}


PUSH unSubscribe$
{ 
	if(xOKSubscribe)
	{
		xOKSubscribe = 0;
		makeString(tx$, "\x8A\x00\x00\x03%s\x00\x00\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$);  //MUTE
		xOKSubscribe = 1;
	}
}


/*
RELEASE input
{
    // TODO:  Add code here
}
*/

CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))
				{
					delayValue_fb = 0;
					//delayValue = byte(tempString, 11) * 16777215;
					delayValue_fb = delayValue_fb + byte(tempString, 12) * 65536;	      
					delayValue_fb = delayValue_fb + byte(tempString, 13) * 256;
					delayValue_fb = delayValue_fb + byte(tempString, 14);
					if (delayValue_fb <= 261120)
					{                       
						value_fb = delayValue_fb / 96;
						decimalValue_fb = ((delayValue_fb - (96 * value_fb)) * 10) / 96;
						delay_fb$ = (value_fb * 10) + decimalValue_fb;
					}
				}
				clearbuffer(tempString);
			}
		}
		xOK = 1;
	}	
}
/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	xOK = 1;
	xOKSubscribe = 1; 
	delay_Int = 0;
}


