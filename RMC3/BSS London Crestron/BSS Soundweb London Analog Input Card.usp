/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE 
#ANALOG_SERIAL_EXPAND INPUTSWITHOUTPUTS
#DIGITAL_EXPAND INPUTSWITHOUTPUTS 
#HELP_PDF_FILE "bss soundweb london analog input card v4.2 help.pdf"
#ENABLE_STACK_CHECKING

#HELP_BEGIN
version 4.2  
See help file bss soundweb london analog input card v4.2 help.pdf
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_, _skip_, subscribe$, unSubscribe$; 
DIGITAL_INPUT meter_subscribe$;

//DIGITAL_INPUT _skip_,phantomSwitch$[8]; 
DIGITAL_INPUT _skip_, channel_1_phantomSwitchOn$;
DIGITAL_INPUT channel_1_phantomSwitchOff$; 
DIGITAL_INPUT _skip_, channel_2_phantomSwitchOn$;
DIGITAL_INPUT channel_2_phantomSwitchOff$;
DIGITAL_INPUT _skip_, channel_3_phantomSwitchOn$;
DIGITAL_INPUT channel_3_phantomSwitchOff$;
DIGITAL_INPUT _skip_, channel_4_phantomSwitchOn$;
DIGITAL_INPUT channel_4_phantomSwitchOff$; 

//DIGITAL_INPUT mutes
DIGITAL_INPUT _skip_, channel_1_muteOn$;
DIGITAL_INPUT channel_1_muteOff$;
DIGITAL_INPUT channel_1_muteToggle$; 
DIGITAL_INPUT _skip_, channel_2_muteOn$;
DIGITAL_INPUT channel_2_muteOff$;
DIGITAL_INPUT channel_2_muteToggle$;
DIGITAL_INPUT _skip_, channel_3_muteOn$;
DIGITAL_INPUT channel_3_muteOff$;
DIGITAL_INPUT channel_3_muteToggle$;
DIGITAL_INPUT _skip_, channel_4_muteOn$;
DIGITAL_INPUT channel_4_muteOff$;
DIGITAL_INPUT channel_4_muteToggle$;

//ANALOG_INPUT _skip_, value$[20]; 
ANALOG_INPUT _skip_,_skip_, channel_1_reference$;
ANALOG_INPUT channel_1_attack$;
ANALOG_INPUT channel_1_release$;
ANALOG_INPUT channel_1_gain$;
 
ANALOG_INPUT _skip_,_skip_, channel_2_reference$;
ANALOG_INPUT channel_2_attack$;
ANALOG_INPUT channel_2_release$;
ANALOG_INPUT channel_2_gain$;

ANALOG_INPUT _skip_,_skip_, channel_3_reference$;
ANALOG_INPUT channel_3_attack$;
ANALOG_INPUT channel_3_release$;
ANALOG_INPUT channel_3_gain$;

ANALOG_INPUT _skip_,_skip_, channel_4_reference$;
ANALOG_INPUT channel_4_attack$;
ANALOG_INPUT channel_4_release$;
ANALOG_INPUT channel_4_gain$;  

BUFFER_INPUT _skip_, rx$[400];
             

//DIGITAL_OUTPUT _skip_, _skip_, _skip_, _skip_, phantomSwitch_fb$[8];
DIGITAL_OUTPUT _skip_,_skip_,_skip_,_skip_,_skip_,_skip_, channel_1_phantomSwitchOn_fb$;
DIGITAL_OUTPUT channel_1_phantomSwitchOff_fb$; 
DIGITAL_OUTPUT _skip_, channel_2_phantomSwitchOn_fb$;
DIGITAL_OUTPUT channel_2_phantomSwitchOff_fb$;
DIGITAL_OUTPUT _skip_, channel_3_phantomSwitchOn_fb$;
DIGITAL_OUTPUT channel_3_phantomSwitchOff_fb$;
DIGITAL_OUTPUT _skip_, channel_4_phantomSwitchOn_fb$;
DIGITAL_OUTPUT channel_4_phantomSwitchOff_fb$; 

//DIGITAL_OUTPUT mutes
DIGITAL_OUTPUT _skip_, channel_1_mute_fb$;
DIGITAL_OUTPUT _skip_,_skip_,_skip_, channel_2_mute_fb$;
DIGITAL_OUTPUT _skip_,_skip_,_skip_, channel_3_mute_fb$;
DIGITAL_OUTPUT _skip_,_skip_,_skip_, channel_4_mute_fb$;



//ANALOG_OUTPUT _skip_, value_fb$[20];
ANALOG_OUTPUT _skip_,_skip_,_skip_, channel_1_meter_fb$; 
ANALOG_OUTPUT channel_1_reference_fb$;
ANALOG_OUTPUT channel_1_attack_fb$;
ANALOG_OUTPUT channel_1_release_fb$;
ANALOG_OUTPUT channel_1_gain_fb$;

ANALOG_OUTPUT _skip_, channel_2_meter_fb$; 
ANALOG_OUTPUT channel_2_reference_fb$;
ANALOG_OUTPUT channel_2_attack_fb$;
ANALOG_OUTPUT channel_2_release_fb$;
ANALOG_OUTPUT channel_2_gain_fb$;
                                         
ANALOG_OUTPUT _skip_, channel_3_meter_fb$;                                         
ANALOG_OUTPUT channel_3_reference_fb$;
ANALOG_OUTPUT channel_3_attack_fb$;
ANALOG_OUTPUT channel_3_release_fb$;
ANALOG_OUTPUT channel_3_gain_fb$;
                                         
ANALOG_OUTPUT _skip_, channel_4_meter_fb$;                                         
ANALOG_OUTPUT channel_4_reference_fb$;
ANALOG_OUTPUT channel_4_attack_fb$;
ANALOG_OUTPUT channel_4_release_fb$;
ANALOG_OUTPUT channel_4_gain_fb$;   

STRING_OUTPUT _skip_, tx$;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER meterRate$;
INTEGER_PARAMETER card$;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
//STRING_PARAMETER 

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/


#BEGIN_PARAMETER_PROPERTIES meterRate$
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 50d , 2000d;
   propDefaultValue = 2000d; 
   #BEGIN_PROP_FULL_DESCRIPTION  
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES card$
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   //propBounds = 1d , 4d;
   propDefaultValue = 1d; 
   propList = {1d,"A"},{2d,"B"},{3d,"C"},{4d,"D"};  
   #BEGIN_PROP_FULL_DESCRIPTION  
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK,xOKGain1,xOKGain2,xOKGain3,xOKGain4,xSubscribe;
STRING tempString[40];

STRING returnString[4];

INTEGER returnI,subscribe,meter_subscribe,volume;   

INTEGER i, xValue, xPhantom, stateVarValue, stateVarPhantom, stateVarReceive;
INTEGER volumeInput[40];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

String_Function iToVolumePercent(INTEGER int)
{                 
	// number from 0 - 65535  
	volume = (int*100)/65535;                            
	returnString = "\x00" + chr(volume) + "\x00\x00";
    Return (returnString);
}


Integer_Function volumePercentToI(STRING str)
{   
	INTEGER fraction;                      
	fraction = byte(str,3)*256+byte(str,4);
	if(fraction > 32767){
		volume = ((byte(str, 2)+1)*65535)/100;                  
	}
	else{
		volume = (byte(str, 2)*65535)/100;
	}
	returnI = volume;

    Return (returnI);
}
  
Integer_Function wordToI(STRING sSourceString, Integer iHighByte, Integer iLowByte)//will take string and return integer Word
{
 	INTEGER iWord;

	if((byte(sSourceString,iHighByte) <> 65535) && byte(sSourceString,iLowByte) <> 65535)//error check
		iWord = (byte(sSourceString,iHighByte)*256)+byte(sSourceString,iLowByte);
    else
		iWord = 65535;
	Return (iWord);
	
}     


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH subscribe$
{      	
wait(20)
{ 
	if(xSubscribe)
	{   
		xSubscribe = 0;
		for (i = 1 to 4)
		{                                                                                                                                    
				makeString(tx$, "\x8E\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 1));  //REFERENCE
				processlogic();
				makeString(tx$, "\x8E\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 2));  //ATTACK
				processlogic();
				makeString(tx$, "\x8E\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 3));  //RELEASE
				processlogic();
				makeString(tx$, "\x8E\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 4));  //GAIN
				processlogic();		
				makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 5));  //PHANTOM SWITCH
				processlogic();
				makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(208+(i-1)));  //MUTE
				processlogic();		
		}
	
		subscribe = 1; 
		xSubscribe = 1;
	}
}

}


PUSH unSubscribe$
{
    if(xSubscribe)
	{   
		xSubscribe = 0;
		for (i = 1 to 4)
		{
			makeString(tx$, "\x8F\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 1));  //REFERENCE
			processlogic();
			makeString(tx$, "\x8F\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 2));  //ATTACK
			processlogic();
			makeString(tx$, "\x8F\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 3));  //RELEASE
			processlogic();
			makeString(tx$, "\x8F\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 4));  //GAIN
			processlogic();		
			makeString(tx$, "\x8A\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 5));  //PHANTOM SWITCH
			processlogic();
			makeString(tx$, "\x8A\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(208+(i-1)));  //MUTE
			processlogic();		
		}	
	
		subscribe = 0;
		xSubscribe = 1;
	}

}

PUSH meter_subscribe$
{      	
wait(20)
{
	for (i = 1 to 4)
	{                                                                                                                                    
			makeString(tx$, "\x8E\x00\x00\x03\x00\x00%s\x00%s\x00\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 0), chr(high(meterRate$)), chr(low(meterRate$)));  //METER     chr(card$)
			processlogic();		
	}

meter_subscribe = meter_subscribe$;
}

}


RELEASE meter_subscribe$
{

	for (i = 1 to 4)
	{
		makeString(tx$, "\x8F\x00\x00\x03\x00\x00%s\x00%s\x00\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(((i-1)*6) + 0), chr(high(meterRate$)), chr(low(meterRate$)));  //METER    chr(card$)
		processlogic();		
	}	

meter_subscribe = meter_subscribe$;

}

CHANGE channel_1_reference$
{          
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 1;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_1_reference$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_1_reference$;
		channel_1_reference_fb$ = volumeInput[stateVarValue];
		makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_1_reference$));    // chr(card$)
	}

}  

CHANGE channel_1_attack$
{          
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 2;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_1_attack$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_1_attack$;
		channel_1_attack_fb$ = volumeInput[stateVarValue];
		makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_1_attack$));    // chr(card$)
	}

}

CHANGE channel_1_release$
{          
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 3;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_1_release$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_1_release$;
		channel_1_release_fb$ = volumeInput[stateVarValue];
		makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_1_release$));    // chr(card$)
	}

}

CHANGE channel_1_gain$
{          
	//xValue = getLastModifiedArrayIndex(); 
	if(xOKGain1)
	{ 
		xOKGain1 = 0;
	    stateVarValue = 4;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);
	
		if(channel_1_gain$ <> volumeInput[stateVarValue])
		{
			volumeInput[stateVarValue] = channel_1_gain$;
			channel_1_gain_fb$ = volumeInput[stateVarValue];
			makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_1_gain$));    // chr(card$)
		}      
		xOKGain1 = 1;
	}

}  

CHANGE channel_2_reference$
{      
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 7;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_2_reference$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_2_reference$;
		channel_2_reference_fb$ = volumeInput[stateVarValue];
		makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_2_reference$));    // chr(card$)
	} 
}  

CHANGE channel_2_attack$
{          
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 8;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_2_attack$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_2_attack$;
		channel_2_attack_fb$ = volumeInput[stateVarValue];
		makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_2_attack$));    // chr(card$)
	}

}

CHANGE channel_2_release$
{          
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 9;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_2_release$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_2_release$;
		channel_2_release_fb$ = volumeInput[stateVarValue];
		makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_2_release$));    // chr(card$)
	}

}

CHANGE channel_2_gain$
{ 
	if(xOKGain2)
	{           
		xOKGain2 = 0;
		//xValue = getLastModifiedArrayIndex();
	    stateVarValue = 10;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);
	
		if(channel_2_gain$ <> volumeInput[stateVarValue])
		{
			volumeInput[stateVarValue] = channel_2_gain$;
			channel_2_gain_fb$ = volumeInput[stateVarValue];
			makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_2_gain$));    // chr(card$)
		}            
		xOKGain2 = 1;
	}

}

CHANGE channel_3_reference$
{          
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 13;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_3_reference$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_3_reference$;
		channel_3_reference_fb$ = volumeInput[stateVarValue];
		makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_3_reference$));    // chr(card$)
	}

}  

CHANGE channel_3_attack$
{          
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 14;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_3_attack$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_3_attack$;
		channel_3_attack_fb$ = volumeInput[stateVarValue];
		makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_3_attack$));    // chr(card$)
	}

}

CHANGE channel_3_release$
{          
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 15;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_3_release$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_3_release$;
		channel_3_release_fb$ = volumeInput[stateVarValue];
		makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_3_release$));    // chr(card$)
	}

}

CHANGE channel_3_gain$
{  
	if(xOKGain3)
	{
		xOKGain3 = 0;        
		//xValue = getLastModifiedArrayIndex();
	    stateVarValue = 16;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);
	
		if(channel_3_gain$ <> volumeInput[stateVarValue])
		{
			volumeInput[stateVarValue] = channel_3_gain$;
			channel_3_gain_fb$ = volumeInput[stateVarValue];
			makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_3_gain$));    // chr(card$)
		}            
		xOKGain3 = 1;
	}

}

CHANGE channel_4_reference$
{          
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 19;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_4_reference$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_4_reference$;
		channel_4_reference_fb$ = volumeInput[stateVarValue];
		makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_4_reference$));    // chr(card$)
	}

}  

CHANGE channel_4_attack$
{          
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 20;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_4_attack$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_4_attack$;
		channel_4_attack_fb$ = volumeInput[stateVarValue];
		makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_4_attack$));    // chr(card$)
	}

}

CHANGE channel_4_release$
{          
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 21;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_4_release$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_4_release$;
		channel_4_release_fb$ = volumeInput[stateVarValue];
		makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_4_release$));    // chr(card$)
	}

}

CHANGE channel_4_gain$
{   
	if(xOKGain4)
	{
		xOKGain4 = 0;       
		//xValue = getLastModifiedArrayIndex();
	    stateVarValue = 22;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);
	
		if(channel_4_gain$ <> volumeInput[stateVarValue])
		{
			volumeInput[stateVarValue] = channel_4_gain$;
			channel_4_gain_fb$ = volumeInput[stateVarValue];
			makeString(tx$, "\x8D\x00\x00\x03\x00\x00%s\x00%s%s\x03\x03\x03\x03\x03", chr(card$), chr(stateVarValue), iToVolumePercent(channel_4_gain$));    // chr(card$)
		}            
		xOKGain4 = 1;
	}

}


  
  
PUSH channel_1_phantomSwitchOn$
{                   
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 5;//((xPhantom-1) * 6) + 5;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));// chr(card$)
	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH   chr(card$)
		processlogic();
	}
}   

PUSH channel_1_phantomSwitchOff$
{                   
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 5;//((xPhantom-5) * 6) + 5;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH    chr(card$)
		processlogic();
	}
} 

PUSH channel_2_phantomSwitchOn$
{                   
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 11;//((xPhantom-1) * 6) + 5;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));// chr(card$)
	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH   chr(card$)
		processlogic();
	}
}   

PUSH channel_2_phantomSwitchOff$
{                   
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 11;//((xPhantom-5) * 6) + 5;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH    chr(card$)
		processlogic();
	}
}

PUSH channel_3_phantomSwitchOn$
{                   
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 17;//((xPhantom-1) * 6) + 5;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));// chr(card$)
	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH   chr(card$)
		processlogic();
	}
}   

PUSH channel_3_phantomSwitchOff$
{                   
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 17;//((xPhantom-5) * 6) + 5;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH    chr(card$)
		processlogic();
	}
}

PUSH channel_4_phantomSwitchOn$
{                   
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 23;//((xPhantom-1) * 6) + 5;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));// chr(card$)
	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH   chr(card$)
		processlogic();
	}
}   

PUSH channel_4_phantomSwitchOff$
{                   
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 23;//((xPhantom-5) * 6) + 5;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x00%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH    chr(card$)
		processlogic();
	}
}   
PUSH channel_1_muteOn$
{      
	stateVarPhantom = 208;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		processlogic();
	}

}
PUSH channel_1_muteOff$
{      
	stateVarPhantom = 208;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		processlogic();
	}

}
PUSH channel_1_muteToggle$
{    
	stateVarPhantom = 208; 
	if(channel_1_mute_fb$)
	{
		makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

		if(subscribe)
		{
			makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			processlogic();
		}
	} 
	else
	{
		makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

		if(subscribe)
		{
			makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			processlogic();
		}
	}
}
PUSH channel_2_muteOn$
{   
	stateVarPhantom = 209;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		processlogic();
	}

}
PUSH channel_2_muteOff$
{     
	stateVarPhantom = 209;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		processlogic();
	}

}
PUSH channel_2_muteToggle$
{       
	stateVarPhantom = 209; 
	if(channel_2_mute_fb$)
	{
		makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

		if(subscribe)
		{
			makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			processlogic();
		}
	} 
	else
	{
		makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

		if(subscribe)
		{
			makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			processlogic();
		}
	}
}
PUSH channel_3_muteOn$
{        
	stateVarPhantom = 210;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		processlogic();
	}

}
PUSH channel_3_muteOff$
{     
	stateVarPhantom = 210;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		processlogic();
	}
}
PUSH channel_3_muteToggle$
{     
	stateVarPhantom = 210; 
	if(channel_3_mute_fb$)
	{
		makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

		if(subscribe)
		{
			makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			processlogic();
		}
	} 
	else
	{
		makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

		if(subscribe)
		{
			makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			processlogic();
		}
	}
}
PUSH channel_4_muteOn$
{       
	stateVarPhantom = 211;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		processlogic();
	}
}
PUSH channel_4_muteOff$
{     
	stateVarPhantom = 211;
	makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		processlogic();
	}
}
PUSH channel_4_muteToggle$
{    
	stateVarPhantom = 211; 
	if(channel_4_mute_fb$)
	{
		makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

		if(subscribe)
		{
			makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			processlogic();
		}
	} 
	else
	{
		makeString(tx$, "\x88\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));//	chr(card$)	

		if(subscribe)
		{
			makeString(tx$, "\x89\x00\x00\x03\x00\x00%s\x07%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			processlogic();
		}
	}
}

  
  
/*
RELEASE input
{
    // TODO:  Add code here
}
*/

CHANGE rx$
{  
	integer first;
	integer second;
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || ((mid(tempString, 6, 2) = "\x00\x00") && (byte(tempString, 8) = card$)))
				{             
					stateVarReceive = wordToI(tempString,9, 10);
//print("\nSV %u",stateVarReceive);   
					if(stateVarReceive = 2000 || stateVarReceive = 2001 || stateVarReceive = 2002 || stateVarReceive = 2003)
					{
						cswitch(stateVarReceive)
						{
							CASE(2000):
							{
							    channel_1_mute_fb$ = byte(tempString, 14);
								break;
							}  
							CASE(2001):
							{
							    channel_2_mute_fb$ = byte(tempString, 14);
								break;
							}
							CASE(2002):
							{
							    channel_3_mute_fb$ = byte(tempString, 14);
								break;
							}
							CASE(2003):
							{
							    channel_4_mute_fb$ = byte(tempString, 14);
								break;
							}
						}
					}
					else if ((stateVarReceive MOD 6) = 5)
					{               
						if (byte(tempString, 14))
						{
							first =  (stateVarReceive/6)+5;
							second = (stateVarReceive/6)+1;
							switch(first)
							{
								CASE (1): channel_1_phantomSwitchOn_fb$ = 0;
								CASE (2): channel_2_phantomSwitchOn_fb$ = 0;
								CASE (3): channel_3_phantomSwitchOn_fb$ = 0;
								CASE (4): channel_4_phantomSwitchOn_fb$ = 0;
								CASE (5): channel_1_phantomSwitchOff_fb$ = 0;
								CASE (6): channel_2_phantomSwitchOff_fb$ = 0;
								CASE (7): channel_3_phantomSwitchOff_fb$ = 0;
								CASE (8): channel_4_phantomSwitchOff_fb$ = 0;
							} 
							switch(second)
							{
								CASE (1): channel_1_phantomSwitchOn_fb$ = 1;
								CASE (2): channel_2_phantomSwitchOn_fb$ = 1;
								CASE (3): channel_3_phantomSwitchOn_fb$ = 1;
								CASE (4): channel_4_phantomSwitchOn_fb$ = 1;
								CASE (5): channel_1_phantomSwitchOff_fb$ = 1;
								CASE (6): channel_2_phantomSwitchOff_fb$ = 1;
								CASE (7): channel_3_phantomSwitchOff_fb$ = 1;
								CASE (8): channel_4_phantomSwitchOff_fb$ = 1;
							}                                              
						}
						else
						{    
							first =  (stateVarReceive/6)+1;
							second = (stateVarReceive/6)+5;
							switch(first)
							{
								CASE (1): channel_1_phantomSwitchOn_fb$ = 0;
								CASE (2): channel_2_phantomSwitchOn_fb$ = 0;
								CASE (3): channel_3_phantomSwitchOn_fb$ = 0;
								CASE (4): channel_4_phantomSwitchOn_fb$ = 0;
								CASE (5): channel_1_phantomSwitchOff_fb$ = 0;
								CASE (6): channel_2_phantomSwitchOff_fb$ = 0;
								CASE (7): channel_3_phantomSwitchOff_fb$ = 0;
								CASE (8): channel_4_phantomSwitchOff_fb$ = 0;
							} 
							switch(second)
							{
								CASE (1): channel_1_phantomSwitchOn_fb$ = 1;
								CASE (2): channel_2_phantomSwitchOn_fb$ = 1;
								CASE (3): channel_3_phantomSwitchOn_fb$ = 1;
								CASE (4): channel_4_phantomSwitchOn_fb$ = 1;
								CASE (5): channel_1_phantomSwitchOff_fb$ = 1;
								CASE (6): channel_2_phantomSwitchOff_fb$ = 1;
								CASE (7): channel_3_phantomSwitchOff_fb$ = 1;
								CASE (8): channel_4_phantomSwitchOff_fb$ = 1;
							} 
						}
					}
					else
					{
						//stateVarReceive = ((stateVarReceive / 6) * 5) + ((stateVarReceive MOD 6) + 1)-1;
						volumeInput[stateVarReceive] = volumePercentToI(mid(tempString, 11, 4));
//print("\nSV %u", stateVarReceive); //unsigned integer
						switch(stateVarReceive)
						{
							case(0): channel_1_meter_fb$ = volumeInput[stateVarReceive];//Ch1.Meter
							case(1): channel_1_reference_fb$ = volumeInput[stateVarReceive]; //Ch1. Reference
							case(2): channel_1_attack_fb$ = volumeInput[stateVarReceive]; //ch1. Attack
							case(3): channel_1_release_fb$ = volumeInput[stateVarReceive]; //Ch1. Release
							case(4): channel_1_gain_fb$ = volumeInput[stateVarReceive]; //Ch1. Gain
							//case(5): value_fb$[6] = volumeInput[stateVarReceive]; //Ch1. Phantom
							case(6): channel_2_meter_fb$ = volumeInput[stateVarReceive];
							case(7): channel_2_reference_fb$ = volumeInput[stateVarReceive];
							case(8): channel_2_attack_fb$ = volumeInput[stateVarReceive];
							case(9): channel_2_release_fb$ = volumeInput[stateVarReceive];
							case(10): channel_2_gain_fb$ = volumeInput[stateVarReceive];
							//case(11): value_fb$[12] = volumeInput[stateVarReceive];
							case(12): channel_3_meter_fb$ = volumeInput[stateVarReceive];
							case(13): channel_3_reference_fb$ = volumeInput[stateVarReceive];
							case(14): channel_3_attack_fb$ = volumeInput[stateVarReceive];
							case(15): channel_3_release_fb$ = volumeInput[stateVarReceive];
							case(16): channel_3_gain_fb$ = volumeInput[stateVarReceive];
							//case(17): value_fb$[18] = volumeInput[stateVarReceive];
							case(18): channel_4_meter_fb$ = volumeInput[stateVarReceive];
							case(19): channel_4_reference_fb$ = volumeInput[stateVarReceive];
							case(20): channel_4_attack_fb$ = volumeInput[stateVarReceive];
							case(21): channel_4_release_fb$ = volumeInput[stateVarReceive];
							case(22): channel_4_gain_fb$ = volumeInput[stateVarReceive];
							//case(23): value_fb$[24] = volumeInput[stateVarReceive];

						}//switch
					}//else
				}
				clearbuffer(tempString);
			}
		}
		xOK = 1;
	}	
}
/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	INTEGER i;
	xOK = 1;
	subscribe = 0;
	xSubscribe = 1;
	xOKGain1 = 1;
	xOKGain2 = 1;
	xOKGain3 = 1;
	xOKGain4 = 1;
}


