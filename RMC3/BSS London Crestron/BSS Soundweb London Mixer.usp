/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE 
#ANALOG_SERIAL_EXPAND INPUTSWITHOUTPUTS 
#HELP_PDF_FILE "bss soundweb london mixer v4.2 help.pdf"
#ENABLE_STACK_CHECKING

#HELP_BEGIN
version 4.2
see help file bss soundweb london mixer v4.2 help.pdf
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_, mute$, unMute$; 
DIGITAL_INPUT _skip_, polarityOn$, polarityOff$;
DIGITAL_INPUT _skip_, routeToGroup1On$, routeToGroup2On$, routeToGroup3On$, routeToGroup4On$; 
DIGITAL_INPUT _skip_, routeToGroup1Off$, routeToGroup2Off$, routeToGroup3Off$, routeToGroup4Off$;
DIGITAL_INPUT _skip_, soloOn$, soloOff$;
DIGITAL_INPUT _skip_,subscribe$,unSubscribe$;
ANALOG_INPUT _skip_, gain$;
ANALOG_INPUT _skip_, pan$;
ANALOG_INPUT _skip_, input$; 
BUFFER_INPUT _skip_, rx$[400]; 
ANALOG_INPUT _skip_, aux$[4];


DIGITAL_OUTPUT _skip_, mute_fb$;
DIGITAL_OUTPUT _skip_, _skip_, polarity_fb$; 
DIGITAL_OUTPUT _skip_, _skip_, routeToGroup1_fb$, routeToGroup2_fb$, routeToGroup3_fb$, routeToGroup4_fb$; 
DIGITAL_OUTPUT _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, solo_fb$; 
ANALOG_OUTPUT _skip_, _skip_, _skip_, _skip_,_skip_, gain_fb$;
ANALOG_OUTPUT _skip_, pan_fb$;
STRING_OUTPUT _skip_, _skip_, _skip_, tx$;  
ANALOG_OUTPUT _skip_, aux_fb$[4];

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
//INTEGER_PARAMETER VD;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER ObjectID$[3];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES ObjectID$   
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   //propBounds = lower_bound , upper_bound;
   propDefaultValue = "\x00\x01\x00"; 

   propShortDescription = "HiQnet Object ID in 3-byte **HEX** ie\x00\x01\x00";
   #BEGIN_PROP_FULL_DESCRIPTION  
    "SEE HELP FILE"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER stateVar, stateVarSub, stateVarUnSub,subscribe;
INTEGER xRoute, xAux, xSubscribe, xUnSubscribe;

STRING returnString[4];
INTEGER returnI,volumeInput, rxSV;

INTEGER xOK,xOKSubscribe,xOKGain,input,volume;
STRING tempString[40];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

String_Function iToVolumePercent(INTEGER int)
{                 
	// number from 0 - 65535  
	volume = (int*100)/65535;                            
	returnString = "\x00" + chr(volume) + "\x00\x00";
    Return (returnString);

}


Integer_Function volumePercentToI(STRING str)
{   
	INTEGER fraction;                      
	fraction = byte(str,3)*256+byte(str,4);
	if(fraction > 32767){
		volume = ((byte(str, 2)+1)*65535)/100;                  
	}
	else{
		volume = (byte(str, 2)*65535)/100;
	}
	returnI = volume;

    Return (returnI);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/


PUSH mute$
{        
	stateVar = ((input-1) * 100) + 1;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));

	if(subscribe)
	{
   		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //Subscribe MUTE
		processlogic();
	}
}


PUSH unMute$
{
	stateVar = ((input-1) * 100) + 1;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //Subscribe MUTE
		processlogic();
	}
}


PUSH polarityOn$
{        
	stateVar = ((input-1) * 100) + 3;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //Subscribe POLARITY
		processlogic();
	}
}


PUSH polarityOff$
{
	stateVar = ((input-1) * 100) + 3;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //Subscribe POLARITY
		processlogic();
	}
}


PUSH soloOn$
{        
	stateVar = ((input-1) * 100) + 4;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //SOLO
		processlogic();
	}
}


PUSH soloOff$
{
	stateVar = ((input-1) * 100) + 4;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));

	if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //SOLO
		processlogic();
	}
}



PUSH routeToGroup1On$
{
	stateVar = ((input-1) * 100) + 40 + 1-1;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));		

    if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		processlogic();
	}
}   

PUSH routeToGroup2On$
{
	stateVar = ((input-1) * 100) + 40 + 2-1;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));		

    if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		processlogic();
	}
}

PUSH routeToGroup3On$
{
	stateVar = ((input-1) * 100) + 40 + 3-1;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));		

    if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		processlogic();
	}
}

PUSH routeToGroup4On$
{
	stateVar = ((input-1) * 100) + 40 + 4-1;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));		

    if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		processlogic();
	}
}

PUSH routeToGroup1Off$
{
	stateVar = ((input-1) * 100) + 40 + 1-1;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));		

     if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		processlogic();
	}
} 

PUSH routeToGroup2Off$
{
	stateVar = ((input-1) * 100) + 40 + 2-1;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));		

     if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		processlogic();
	}
}


PUSH routeToGroup3Off$
{
	stateVar = ((input-1) * 100) + 40 + 3-1;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));		

     if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		processlogic();
	}
}


PUSH routeToGroup4Off$
{
	stateVar = ((input-1) * 100) + 40 + 4-1;
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));		

     if(subscribe)
	{
		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		processlogic();
	}
}


CHANGE gain$
{

	if(volumeInput <> gain$)
	{      
		if(xOKGain)
		{
			xOKGain = 0;
			stateVar = (input-1) * 100;
			volumeInput = gain$;
			gain_fb$ = gain$;

			makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(gain$));
			xOKGain =1;
		}
	}
	
}

  
  
CHANGE pan$
{
	stateVar = ((input-1) * 100) + 2;
	makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(pan$));

	if(subscribe)
	{
		makeString(tx$, "\x8E\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //PAN
		processlogic();
	}
}
  
  
CHANGE aux$
{         
	xAux = getLastModifiedArrayIndex();
	stateVar = ((input-1) * 100) + 20 + (xAux-1);
	makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(aux$[xAux]));

	if(subscribe)
	{
		makeString(tx$, "\x8E\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVar)), chr(low(stateVar)));  //AUX
		processlogic();
	}
}
  

PUSH subscribe$
{           

	wait(20)
	{ 
		if(xOKSubscribe)
		{
			xOKSubscribe = 0;
			xSubscribe = (input-1) * 100;
			stateVarSub = xSubscribe;
			makeString(tx$, "\x8E\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //GAIN
			processlogic();
			
			stateVarSub = xSubscribe + 1;
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //MUTE
			processlogic();
			
			stateVarSub = xSubscribe + 2;
			makeString(tx$, "\x8E\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //PAN
			processlogic();
			
			stateVarSub = xSubscribe + 3;
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //POLARITY
			processlogic();
			
			stateVarSub = xSubscribe + 20;
			makeString(tx$, "\x8E\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //AUX1
			processlogic();
			
			stateVarSub = xSubscribe + 21;
			makeString(tx$, "\x8E\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //AUX2
			processlogic();
			
			stateVarSub = xSubscribe + 22;
			makeString(tx$, "\x8E\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //AUX3
			processlogic();
			
			stateVarSub = xSubscribe + 23;
			makeString(tx$, "\x8E\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //AUX4
			processlogic();
			
			stateVarSub = xSubscribe + 40;
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //ROUTE1
			processlogic();
			
			stateVarSub = xSubscribe + 41;
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //ROUTE2
			processlogic();
			
			stateVarSub = xSubscribe + 42;
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //ROUTE3
			processlogic();
			
			stateVarSub = xSubscribe + 43;
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //ROUTE4
			processlogic();
			
			stateVarSub = xSubscribe + 4;
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //SOLO
			processlogic();
			
			stateVarSub = xSubscribe + 5;
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //OVERRIDE
			processlogic();
			
			stateVarSub = xSubscribe + 6;
			makeString(tx$, "\x8E\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //OFF GAIN
			processlogic();	
		
			stateVarSub = xSubscribe + 7;
			makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //AUTO
			processlogic();	
	
			subscribe = 1;   
			xOKSubscribe = 1;
		}
	}

}  


PUSH unSubscribe$
{     
	if(xOKSubscribe)
	{
		xOKSubscribe = 0;
		xUnSubscribe = (input-1) * 100;
		stateVarUnSub = xUnSubscribe;
		makeString(tx$, "\x8F\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //GAIN
		processlogic();
		
		stateVarUnSub = xUnSubscribe + 1;
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //MUTE
		processlogic();
		
		stateVarUnSub = xUnSubscribe + 2;
		makeString(tx$, "\x8F\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //PAN
		processlogic();
		
		stateVarUnSub = xUnSubscribe + 3;
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //POLARITY
		processlogic();
		
		stateVarUnSub = xUnSubscribe + 20;
		makeString(tx$, "\x8F\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //AUX1
		processlogic();
		
		stateVarUnSub = xUnSubscribe + 21;
		makeString(tx$, "\x8F\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //AUX2
		processlogic();
		
		stateVarUnSub = xUnSubscribe + 22;
		makeString(tx$, "\x8F\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //AUX3
		processlogic();
		
		stateVarUnSub = xUnSubscribe + 23;
		makeString(tx$, "\x8F\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //AUX4
		processlogic();
		
		stateVarUnSub = xUnSubscribe + 40;
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //ROUTE1
		processlogic();
		
		stateVarUnSub = xUnSubscribe + 41;
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //ROUTE2
		processlogic();
		
		stateVarUnSub = xUnSubscribe + 42;
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //ROUTE3
		processlogic();
		
		stateVarUnSub = xUnSubscribe + 43;
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //ROUTE4
		processlogic();
		
		stateVarUnSub = xUnSubscribe + 4;
		makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //SOLO
		processlogic();
	
		subscribe = 0;   
		xOKSubscribe = 1;
	}
}  

change input$
{
 	if(input$ > 0)
 		input = input$;
 	else       
 	{
 		input = 1;
 		print ("error input for the automixer cannot be 0. set to default of 1");
 	}
}
/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))
				{  
					rxSV = ((byte(tempString, 9) * 256 ) + byte(tempString, 10));
					if ((rxSV / 100) = input - 1)
					{   
						switch (rxSV MOD 100)
						{
							case (0): 
								{	
									volumeInput = volumePercentToI(mid(tempString, 11, 4));
									gain_fb$ = volumeInput;
								}
							case (1): mute_fb$ = byte(tempString, 14);
							case (2): pan_fb$ = volumePercentToI(mid(tempString, 11, 4));
							case (3): polarity_fb$ = byte(tempString, 14);
							case (20): aux_fb$[1] = volumePercentToI(mid(tempString, 11, 4));
							case (21): aux_fb$[2] = volumePercentToI(mid(tempString, 11, 4));
							case (22): aux_fb$[3] = volumePercentToI(mid(tempString, 11, 4));
							case (23): aux_fb$[4] = volumePercentToI(mid(tempString, 11, 4));
							case (40): routeToGroup1_fb$ = byte(tempString, 14);
							case (41): routeToGroup2_fb$ = byte(tempString, 14);
							case (42): routeToGroup3_fb$ = byte(tempString, 14);
							case (43): routeToGroup4_fb$ = byte(tempString, 14);
							case (4): solo_fb$ = byte(tempString, 14);
						}
					}
				}
				clearbuffer(tempString);
			}
		}
		xOK = 1;
	}	
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	xOK = 1;
	subscribe = 0;
	xOKSubscribe = 1; 
	xOKGain = 1;
}


