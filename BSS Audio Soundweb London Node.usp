/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE 
#HELP_PDF_FILE "bss soundweb london node v4.2 help.pdf"
#ENABLE_STACK_CHECKING

#HELP_BEGIN  
	version 4.2   
	See help file bss soundweb london node v4.2 help.pdf
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT 
// ANALOG_INPUT
//STRING_INPUT node$[2]; 
BUFFER_INPUT _skip_, comRx$[1000];
BUFFER_INPUT modulesTx$[1000];



// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT _skip_, comTx$; 
STRING_OUTPUT modulesRx$;

   

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
//INTEGER_PARAMETER VD;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER node$[2];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES node$
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   //propBounds = lower_bound , upper_bound;
   propDefaultValue = "\x00\x00"; 
   #BEGIN_PROP_FULL_DESCRIPTION  
    "see help document"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER xOK1;
STRING tempString1[80]; 

INTEGER checksum, i;
STRING sendString[80];

INTEGER xOK2;
STRING tempString2[80];
STRING tempString3[80];

INTEGER j;
STRING receiveString[80];

INTEGER marker1, marker2;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function send(STRING str1)
{        
	checksum = 0;
	sendString = "";
	for (i = 1 to len(str1))                                                               
	{             
		checksum = checksum ^ byte(str1, i);
		if (byte(str1, i) = 2 || byte(str1, i) = 3 || byte(str1, i) = 6 || byte(str1, i) = 21 || byte(str1, i) = 27)
		{     
			makeString(sendString, "%s\x1B%s", sendString, chr(byte(str1, i) + 128));
		}               
		else
		{
			makeString(sendString, "%s%s", sendString, chr(byte(str1, i)));
		}
	}                  
	if (checksum = 2 || checksum = 3 || checksum = 6 || checksum = 21 || checksum = 27)
	{
		makeString(comTx$, "\x02%s\x1B%s\x03", sendString, chr(checksum+128));
	}
	else
	{                                      
		makeString(comTx$, "\x02%s%s\x03", sendString, chr(checksum));
	}                                      
}


String_Function receive(STRING str2)
{           
	receiveString = "";
	for (j = 1 to len(str2))
	{
		if (byte(str2, j) = 27)
		{
			receiveString = receiveString + chr(byte(str2, j+1)-128);	
			j = j+1;
		} 
		else
		{
			receiveString = receiveString + chr(byte(str2, j));
		}
	}    
	while (byte(receiveString, 1) = 6)
	{
		receiveString = right(receiveString, len(receiveString)-1);
	}
	return (receiveString);
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE modulesTx$
{        
	if (xOK1)
	{
		xOK1 = 0;
		while (len(modulesTx$))
		{                 
			marker1 = find("\x03\x03\x03\x03\x03", modulesTx$);
			marker2 = marker1 + 5;    
			if (marker2 <= len(modulesTx$))
			{
				while (byte(modulesTx$, marker2) = 3)
				{
					marker1 = marker1 + 1;
					marker2 = marker2 + 1;  
					if (marker2 > len(modulesTx$))
					{
						break;
					}
				} 
			}
			if (marker1)
			{                   
				marker1 = marker1 + 4;
				tempString1 = remove(mid(modulesTx$, 1, marker1), modulesTx$);
				makeString(tempString1, "%s%s%s", left(tempString1, 1), node$, right(tempString1, len(tempString1)-3));
				call send(left(tempString1, len(tempString1)-5));
				clearbuffer(tempString1);
			}                            
		}
		xOK1 = 1;
	}
}


CHANGE comRx$
{   
	INTEGER sDump;
	if (xOK2)
	{
		xOK2 = 0;
		while (len(comRx$))
		{
			if (byte(comRx$, 1) = 6)
			{
				tempString2 = remove("\x06", comRx$);
			}
			else if(byte(comRx$, 1) = 2) //check to see if \x02 is the first byte
			{
				if (find("\x03", comRx$))
				{
					tempString2 = remove("\x03", comRx$);   
					//print("\n");
					//for (i = 1 to len(tempString2))
					//{
					//	print(" %02X", byte(tempString2, i));
				    //}

				tempString3 = receive(tempString2);
 
				if((byte(tempString3,3) = byte(node$,1)) && (byte(tempString3,4) = byte(node$,2))) //make sure message is intended for this node
					modulesRx$ = tempString3 + "\x03\x03\x03\x03";										
				} 
			} 
			else //do not have first byte as \x06 or \x02 get rid of it.
			{                                                           
				     sDump = GetC(comRx$); 
				     //PRINT("GARBAGE %x\n",sDump);
			}                                                             
			clearbuffer(tempString2);
			clearbuffer(tempString3);
		}
		xOK2 = 1;
	}	
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	xOK1 = 1;
	xOK2 = 1;
}


