/*
Dealer Name: Brigham Young University
System Name:
System Number:
Programmer: Bradley T Streeter/David Allred
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Shure ULXD Monitoring"
// #HINT ""
// #DEFINE_CONSTANT 
#DEFINE_CONSTANT    FALSE       0
#DEFINE_CONSTANT    TRUE        1
#DEFINE_CONSTANT    Green		0
#DEFINE_CONSTANT    Yellow		1
#DEFINE_CONSTANT    Orange		2
#DEFINE_CONSTANT    Red			3
#CATEGORY "46" "Monitoring" // Custom
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
//#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Get_All, TCP_IP_Client_Connect_F;
// ANALOG_INPUT 
// STRING_INPUT
BUFFER_INPUT _skip_,From_Wireless$[5000];

DIGITAL_OUTPUT _skip_, TCP_IP_Client_Connect,
				_skip_, Mic1_On, Mic1LessThen5, Mic1LessThen3, Mic1LessThen1AndAHalf, Mic1_RF_Int_Det,
				_skip_, Mic2_On, Mic2LessThen5, Mic2LessThen3, Mic2LessThen1AndAHalf, Mic2_RF_Int_Det;

ANALOG_OUTPUT _skip_, B1Time, B1Percent, B1Bars,
				 _skip_, B2Time, B2Percent, B2Bars;

STRING_OUTPUT _skip_, To_Wireless$,_skip_,DEVICE_ID, FREQUENCY_DIVERSITY_MODE, AUDIO_SUMMING_MODE,
				HIGH_DENSITY, ENCRYPTION, ENCRYPTION_REGENERATE_KEY, 
				_skip_, CHAN_NAME1, METER_RATE1, AUDIO_GAIN1, AUDIO_MUTE1, AUDIO_LVL1, GROUP_CHAN1, 
				FREQUENCY1, RF_INT_DET1, RX_RF_LVL1, RF_ANTENNA1, BATT_BARS1, TX_OFFSET1, TX_RF_PWR1, 
				TX_TYPE1, BATT_TYPE1, BATT_RUN_TIME1, BATT_CHARGE1, BATT_CYCLE1, BATT_TEMP_C1, 
				BATT_TEMP_F1, TX_PWR_LOCK1, TX_MENU_LOCK1, ENCRYPTION_WARNING1, B1HrMin, M1OnDaT, M1OffDaT,
				_skip_, CHAN_NAME2, METER_RATE2, AUDIO_GAIN2, AUDIO_MUTE2, AUDIO_LVL2, GROUP_CHAN2, 
				FREQUENCY2, RF_INT_DET2, RX_RF_LVL2, RF_ANTENNA2, BATT_BARS2, TX_OFFSET2, TX_RF_PWR2, 
				TX_TYPE2, BATT_TYPE2, BATT_RUN_TIME2, BATT_CHARGE2, BATT_CYCLE2, BATT_TEMP_C2, 
				BATT_TEMP_F2, TX_PWR_LOCK2, TX_MENU_LOCK2, ENCRYPTION_WARNING2, B2HrMin, M2OnDaT, M2OffDaT;

DIGITAL_OUTPUT _skip_, Mic2_Exists;

ANALOG_OUTPUT _skip_, B1Status, //Values range from 0-3, representing: Green, Yellow, Orange, and Red
				_skip_, B2Status;

/*******************************************************************************************
  SOCKETS                                                                                                              
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
//INTEGER	 // LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING BattType1$[10], BattType2$[10];


/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Get_All

	{
	if (TCP_IP_Client_Connect_F = 0)
		{   
			TCP_IP_Client_Connect = 1;
		}
	else
		{
			To_Wireless$ = "< GET 0 ALL >";  
			Delay(200);	
			To_Wireless$ = "";
		}
    }
    
Push TCP_IP_Client_Connect_F

	{
	To_Wireless$ = "< GET 0 ALL >";
	Delay(200);
//	TCP_IP_Client_Connect = 0;
	To_Wireless$ = "";
	}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE From_Wireless$
{
	INTEGER StartPosition, Hrs1, Hrs2;
	STRING TempString1[50], TempString2[20], SearchString[50];
	
	While(Find(">",From_Wireless$))		//While there is a > in From_Wireless
	
	{
		TempString1 = Remove(">",From_Wireless$);
		
		if (Find("DEVICE_ID ",TempString1))
			
			{
			SearchString = "DEVICE_ID ";
			StartPosition = (Find(SearchString,TempString1) + Len(SearchString));
			Device_ID = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("FREQUENCY_DIVERSITY_MODE ",TempString1))
			
			{
			SearchString = "FREQUENCY_DIVERSITY_MODE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			FREQUENCY_DIVERSITY_MODE = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("AUDIO_SUMMING_MODE ",TempString1))
			
			{
			SearchString = "AUDIO_SUMMING_MODE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			AUDIO_SUMMING_MODE = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("HIGH_DENSITY ",TempString1))
			
			{
			SearchString = "HIGH_DENSITY ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			HIGH_DENSITY = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("ENCRYPTION_REGENERATE_KEY ",TempString1))
			
			{
			SearchString = "ENCRYPTION_REGENERATE_KEY ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			ENCRYPTION_REGENERATE_KEY = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 ENCRYPTION_WARNING ",TempString1))
			
			{
			SearchString = "REP 1 ENCRYPTION_WARNING ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			ENCRYPTION_WARNING1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 2 ENCRYPTION_WARNING ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 ENCRYPTION_WARNING ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			ENCRYPTION_WARNING2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("ENCRYPTION ",TempString1))
			
			{
			SearchString = "ENCRYPTION ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			ENCRYPTION = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 CHAN_NAME ",TempString1))
			
			{
			SearchString = "REP 1 CHAN_NAME ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			CHAN_NAME1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
			
		else if (Find("REP 2 CHAN_NAME ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 CHAN_NAME ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			CHAN_NAME2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 METER_RATE ",TempString1))
			
			{
			SearchString = "REP 1 METER_RATE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			METER_RATE1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 2 METER_RATE ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 METER_RATE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			METER_RATE2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 AUDIO_GAIN ",TempString1))
			
			{
			SearchString = "REP 1 AUDIO_GAIN ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			AUDIO_GAIN1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 2 AUDIO_GAIN ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 AUDIO_GAIN ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			AUDIO_GAIN2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 AUDIO_MUTE ",TempString1))
			
			{
			SearchString = "REP 1 AUDIO_MUTE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			AUDIO_MUTE1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
			
		else if (Find("REP 2 AUDIO_MUTE ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 AUDIO_MUTE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			AUDIO_MUTE1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 AUDIO_LVL ",TempString1))
			
			{
			SearchString = "REP 1 AUDIO_LVL ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			AUDIO_LVL1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}

		else if (Find("REP 2 AUDIO_LVL ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 AUDIO_LVL ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			AUDIO_LVL2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 GROUP_CHAN ",TempString1))
			
			{
			SearchString = "REP 1 GROUP_CHAN ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			GROUP_CHAN1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
			
		else if (Find("REP 2 GROUP_CHAN ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 GROUP_CHAN ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			GROUP_CHAN2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 FREQUENCY ",TempString1))
			
			{
			SearchString = "REP 1 FREQUENCY ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			FREQUENCY1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 2 FREQUENCY ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 FREQUENCY ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			FREQUENCY2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 RF_INT_DET ",TempString1))
			
			{
			SearchString = "REP 1 RF_INT_DET ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TempString2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			if (TempString2 = "NONE")
				{
				Mic1_RF_Int_Det = FALSE;
				}
			else if (TempString2 = "CRITICAL")
				{
				Mic1_RF_Int_Det = TRUE;
				}	
			RF_INT_DET1 = TempString2;
			TempString1 = "";
			}
			
			
		else if (Find("REP 2 RF_INT_DET ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 RF_INT_DET ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TempString2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			if (TempString2 = "NONE")
				{
				Mic2_RF_Int_Det = FALSE;
				}
			else if (TempString2 = "CRITICAL")
				{
				Mic2_RF_Int_Det = TRUE;
				}	
			RF_INT_DET2 = TempString2;
			TempString1 = "";
			}
			
		else if (Find("REP 1 RX_RF_LVL ",TempString1))
			
			{
			SearchString = "REP 1 RX_RF_LVL ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			RX_RF_LVL1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
						
		else if (Find("REP 2 RX_RF_LVL ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 RX_RF_LVL ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			RX_RF_LVL2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 RF_ANTENNA ",TempString1))
			
			{
			SearchString = "REP 1 RF_ANTENNA ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			RF_ANTENNA1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 2 RF_ANTENNA ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 RF_ANTENNA ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			RF_ANTENNA2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 BATT_BARS ",TempString1))
			
			{
			SearchString = "REP 1 BATT_BARS ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TempString2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			if (TempString2 > "251")	//When BATT_BARS = 255 the mic is off, 252, 253, 254, 255 are error codes
				{
				If(Mic1_On = TRUE) MakeString(M1OffDaT, "%s %s",Date(3), Time());
				Mic1_On = FALSE;	//keep last known BATT_BARS
				}
			else
				{
				if(Mic1_On = FALSE) MakeString(M1OnDaT, "%s %s",Date(3), Time());
				Mic1_On = TRUE;
				B1Bars = atoi(TempString2);
                BATT_BARS1 = TempString2;
				Trace ("1 B1Bars is %d and BattType1$ is %s", B1Bars, BattType1$);
				if ((B1Bars < 2) && (BattType1$ = "ALKA"))
					{
					Mic1LessThen1AndAHalf = TRUE;
					B1Status = Red;
					}
				}
			TempString1 = "";
			}
			
		else if (Find("REP 2 BATT_BARS ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 BATT_BARS ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TempString2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			if (TempString2 > "251")	//When BATT_BARS = 255 the mic is off, 252, 253, 254, 255 are error codes
				{
				if(Mic2_On = TRUE) MakeString(M2OffDaT, "%s %s",Date(3), Time());
				Mic2_On = FALSE;	//keep last known BATT_BARS
				}
			else
				{
				if(Mic2_On = FALSE) MakeString(M2OnDaT, "%s %s",Date(3), Time());
				Mic2_On = TRUE;
				B2Bars = atoi(TempString2);
				BATT_BARS2 = TempString2;
				Trace ("2 B2Bars is %d and BattType2$ is %s", B2Bars, BattType2$);
				if ((B2Bars < 2) && (BattType2$ = "ALKA"))
					{
					Mic2LessThen1AndAHalf = TRUE;
					B2Status = Red;
					}
				}
			TempString1 = "";
			}
			
		else if (Find("REP 1 TX_OFFSET ",TempString1))
			
			{
			SearchString = "REP 1 TX_OFFSET ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TX_OFFSET1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 2 TX_OFFSET ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 TX_OFFSET ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TX_OFFSET2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 TX_RF_PWR ",TempString1))
			
			{
			SearchString = "REP 1 TX_RF_PWR ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TempString2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			if(TempString2 != "UNKN")	//keep last known RF_PWR
				{
				TX_RF_PWR1 = TempString2;
				}
			TempString1 = "";
			}
			
		else if (Find("REP 2 TX_RF_PWR ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 TX_RF_PWR ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TempString2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			if(TempString2 != "UNKN")	//keep last known RF_PWR
				{
				TX_RF_PWR2 = TempString2;
				}
			TempString1 = "";
			}
			
		else if (Find("REP 1 TX_TYPE ",TempString1))
			
			{
			SearchString = "REP 1 TX_TYPE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TempString2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			if(TempString2 != "UNKN")	//keep last known TX_TYPE
				{
				TX_TYPE1 = TempString2;
				}
			TempString1 = "";
			}
			
		else if (Find("REP 2 TX_TYPE ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 TX_TYPE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TempString2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			if(TempString2 != "UNKN")	//keep last known TX_TYPE
				{
				TX_TYPE2 = TempString2;
				}
			TempString1 = "";
			}
			
		else if (Find("REP 1 BATT_TYPE ",TempString1))
			
			{
			SearchString = "REP 1 BATT_TYPE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TempString2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			if(TempString2 != "UNKN")	//keep last known BATT_TYPE
				{
				BATT_TYPE1 = TempString2;
				}
			BattType1$ = TempString2;
			if (BattType1$ = "ALKA")
				{
				B1HrMin = "AA";
				B1Status = Orange;
				}
/*			else if (BattType1$ = "UNKN")
				{
//				B1HrMin = "NA";
				B1Status = Orange;
				} */
			TempString1 = "";
			Trace ("3 B1Bars is %d and BattType1$ is %s", B1Bars, BattType1$);
			if ((B1Bars < 2) && (BattType1$ = "ALKA"))
				{
				Mic1LessThen1AndAHalf = TRUE;
				B1Status = Red;
				}
			}
			
		else if (Find("REP 2 BATT_TYPE ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 BATT_TYPE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TempString2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			if(TempString2 != "UNKN")	//keep last known BATT_TYPE
				{
				BATT_TYPE2 = TempString2;
				}
			BattType2$ = TempString2;
			if(BattType2$ = "ALKA")
				{
				B2HrMin = "AA";
				B2Status = Orange;
				} 
/*			else if (BattType2$ = "UNKN")
				{
//				B2HrMin = "NA";
				B2Status = Orange;
				} */
			TempString1 = "";
			Trace ("4 B2Bars is %d and BattType2$ is %s", B2Bars, BattType2$);
			if ((B2Bars < 2) && (BattType2$ = "ALKA"))
				{
				Mic2LessThen1AndAHalf = TRUE;
				B2Status = Red;
				}
			}
			
		else if (Find("REP 1 BATT_RUN_TIME ",TempString1))
			
			{
			SearchString = "REP 1 BATT_RUN_TIME ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TempString2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			BATT_RUN_TIME1 = TempString2;
			if (TempString2 = "65534")
				{
				B1HrMin = "Calc";
				B1Status = Yellow;
				}	
			else if (TempString2 < "65532")	//When BATT_RUN_TIME = 65535 the mic is off, 65532 - 65535 are error codes
				{
				B1Time = atoi(TempString2);
				Hrs1 = B1Time/60;
				Makestring (B1HrMin, "%d:%02d", Hrs1, B1time%60);

				if (Hrs1<3)
					{
					Mic1LessThen3 = TRUE;
					B1Status = Orange;
					}
				else 
					{
					Mic1LessThen3 = FALSE;
					}
				if (Hrs1<5)
					{
					Mic1LessThen5 = TRUE;
					B1Status = Yellow;
					}
				else
					{
					Mic1LessThen5 = FALSE; 
					B1Status = Green;
					}
				if (B1Time<90)
					{
					Mic1LessThen1AndAHalf = TRUE;
					B1Status = Red;
					}
				else
					{
					Mic1LessThen1AndAHalf = FALSE;
					}
				}
			TempString1 = "";
			}
			
		else if (Find("REP 2 BATT_RUN_TIME ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 BATT_RUN_TIME ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TempString2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			BATT_RUN_TIME2 = TempString2;
			if (TempString2 = "65534")
				{
				B2HrMin = "Calc";
				B2Status = Yellow;
				}
			else if (TempString2 < "65532")	//When BATT_RUN_TIME = 65535 the mic is off, 65532 - 65535 are error codes
				{
				B2Time = atoi(TempString2);
				Hrs2 = B2Time/60;
				Makestring (B2HrMin, "%d:%02d", Hrs2, B2time%60);
				if (Hrs2<3)
					{
					Mic2LessThen3 = TRUE;
					B2Status = Orange;
					}
				else 
					{
					Mic2LessThen3 = FALSE;
					}
				if (Hrs2<5)
					{
					Mic2LessThen5 = TRUE;		
					B2Status = Yellow;
					}
				else
					{
					Mic2LessThen5 = FALSE; 
					B2Status = Green;
					}
				if (B2Time<90)
					{
					Mic2LessThen1AndAHalf = TRUE;
					B2Status = Red;
					}
				else
					{
					Mic2LessThen1AndAHalf = FALSE;
					}
				}
			TempString1 = "";
			}
			
		else if (Find("REP 1 BATT_CHARGE ",TempString1))
			
			{
			SearchString = "REP 1 BATT_CHARGE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			BATT_CHARGE1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
		else if (Find("REP 2 BATT_CHARGE ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 BATT_CHARGE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			BATT_CHARGE2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 BATT_CYCLE ",TempString1))
			
			{
			SearchString = "REP 1 BATT_CYCLE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			BATT_CYCLE1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 2 BATT_CYCLE ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 BATT_CYCLE ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			BATT_CYCLE2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 BATT_TEMP_C ",TempString1))
			
			{
			SearchString = "REP 1 BATT_TEMP_C ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			BATT_TEMP_C1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 2 BATT_TEMP_C ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 BATT_TEMP_C ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			BATT_TEMP_C2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 BATT_TEMP_F ",TempString1))
			
			{
			SearchString = "REP 1 BATT_TEMP_F ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			BATT_TEMP_F1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 2 BATT_TEMP_F ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 BATT_TEMP_F ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			BATT_TEMP_F2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 TX_PWR_LOCK ",TempString1))
			
			{
			SearchString = "REP 1 TX_PWR_LOCK ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TX_PWR_LOCK1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 2 TX_PWR_LOCK ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 TX_PWR_LOCK ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TX_PWR_LOCK2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 1 TX_MENU_LOCK ",TempString1))
			
			{
			SearchString = "REP 1 TX_MENU_LOCK ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TX_MENU_LOCK1 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else if (Find("REP 2 TX_MENU_LOCK ",TempString1))
			
			{
			Mic2_Exists = TRUE;
			SearchString = "REP 2 TX_MENU_LOCK ";
			StartPosition = (Find(SearchString,TempString1) + Len(Searchstring));
			TX_MENU_LOCK2 = mid(TempString1, StartPosition, Find(" >",TempString1,StartPosition) - StartPosition);
			TempString1 = "";
			}
			
		else
		
			{
			TempString1 = "";
			}
       }
	From_Wireless$ = "";
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

WaitForInitializationComplete();
TCP_IP_Client_Connect = 0;
Mic1LessThen1AndAHalf = FALSE;
Mic1LessThen3 = FALSE;
Mic1LessThen5 = FALSE;
Mic2LessThen1AndAHalf = FALSE;
Mic2LessThen3 = FALSE;
Mic2LessThen5 = FALSE;
Mic2_Exists = FALSE; 
B1Status = Green;
B2Status = Green;
BattType1$ = "UNKN";
BattType2$ = "UNKN";


    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}

