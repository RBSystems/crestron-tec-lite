/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT MAXOUTPUT   48
#DEFINE_CONSTANT MAXOUTPUTx2 96
/// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE
#ANALOG_SERIAL_EXPAND INPUTSWITHOUTPUTS 
#DIGITAL_EXPAND INPUTSWITHOUTPUTS
#HELP_PDF_FILE "bss soundweb london matrix mixer v4.2 help.pdf"
#ENABLE_STACK_CHECKING

#HELP_BEGIN
version 4.2 
see help file bss soundweb london matrix mixer v4.2 help.pdf
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_,_skip_, subscribe$; 
DIGITAL_INPUT unSubscribe$;

//DIGITAL_INPUT onOff$[MAXOUTPUTx2]; 
DIGITAL_INPUT _skip_, output_mute$[MAXOUTPUT];

ANALOG_INPUT _skip_, input$;

BUFFER_INPUT _skip_, rx$[400];

ANALOG_INPUT _skip_, output_gain$[MAXOUTPUT];



// BUFFER_INPUT                 

DIGITAL_OUTPUT _skip_,_skip_,_skip_,_skip_,_skip_, output_mute_fb$[MAXOUTPUT];

STRING_OUTPUT _skip_,_skip_,_skip_, tx$;

ANALOG_OUTPUT _skip_, output_gain_fb$[MAXOUTPUT];


/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
//INTEGER_PARAMETER VD;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER ObjectID$[3];
INTEGER_PARAMETER iMAXOUTPUT;


/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES ObjectID$   
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   //propBounds = lower_bound , upper_bound;
   propDefaultValue = "\x00\x01\x00"; 

   propShortDescription = "HiQnet Object ID in 3-byte **HEX** ie\x00\x01\x00";
   #BEGIN_PROP_FULL_DESCRIPTION  
    "SEE HELP FILE"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES 

#BEGIN_PARAMETER_PROPERTIES iMAXOUTPUT   
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 48d;
   propDefaultValue = 1d; 
   
   #BEGIN_PROP_FULL_DESCRIPTION  
    "SEE HELP FILE"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES


/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
// STRUCTURE MyStruct1
// {
// };

// MyStruct1 struct;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER i,volumeOutput[MAXOUTPUT],volume,input;
STRING returnString[4];
INTEGER returnI,subscribe;

INTEGER xOK,xOkGain[MAXOUTPUT],xOKSubscribe;
STRING tempString[40];

INTEGER stateVarOnOff, stateVarGain, stateVarSub, stateVarReceive, x;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

String_Function iToVolumePercent(INTEGER int)
{                 
	// number from 0 - 65535  
	volume = (int*100)/65535;                            
	returnString = "\x00" + chr(volume) + "\x00\x00";
    Return (returnString);

}


Integer_Function volumePercentToI(STRING str)
{   
	INTEGER fraction;                      
	fraction = byte(str,3)*256+byte(str,4);
	if(fraction > 32767){
		volume = ((byte(str, 2)+1)*65535)/100;                  
	}
	else{
		volume = (byte(str, 2)*65535)/100;
	}
	returnI = volume;

    Return (returnI);
}



/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH output_mute$
{                                  
	stateVarOnOff = getLastModifiedArrayIndex();   
	stateVarOnOff = ((stateVarOnOff-1)*128) + (input-1);
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x01\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarOnOff)), chr(low(stateVarOnOff)));

   	if(subscribe)
	{
  		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarOnOff)), chr(low(stateVarOnOff)));  //ON
		processlogic();  	
	}  
}
RELEASE output_mute$
{  
	stateVarOnOff = getLastModifiedArrayIndex(); 
	stateVarOnOff = ((stateVarOnOff-1)*128) + (input-1);
	makeString(tx$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarOnOff)), chr(low(stateVarOnOff)));

   	if(subscribe)
	{
  		makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarOnOff)), chr(low(stateVarOnOff)));  //OFF
		processlogic();  	
	}
}


CHANGE output_gain$
{                          
	x = getLastModifiedArrayIndex();

	if(volumeOutput[x] <> output_gain$[x])
	{   
		if(xOkGain[x])
		{            
		xOkGain[x] =0;
	  	stateVarGain = 16384 + (((x-1)*128) + (input-1));
//print("\nSV %02X", stateVarGain);
  		volumeOutput[x] = output_gain$[x];
		output_gain_fb$[x] = output_gain$[x];
	
		makeString(tx$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarGain)), chr(low(stateVarGain)), iToVolumePercent(output_gain$[x]));
		xOkGain[x]=1;
		}
	}
}
  
  
PUSH subscribe$
{              
	wait(20)
	{  
		if(xOKSubscribe)
		{
			xOKSubscribe = 0;
			stateVarSub = input-1;
			for (i = 1 to iMAXOUTPUT)
			{   
				stateVarSub = input-1 + ((i-1) * 128);
				makeString(tx$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //ON OFF
				processlogic();
			
				stateVarSub = stateVarSub + 16384;
				makeString(tx$, "\x8E\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub))); //GAIN
			    processlogic();
				delay(5);
			}
			subscribe = 1; 
			xOKSubscribe = 1; 
		}
	}
}  


PUSH unSubscribe$
{ 
	if(xOKSubscribe)
	{
		xOKSubscribe = 0;
		stateVarSub = input-1;
		for (i = 1 to iMAXOUTPUT)
		{   
			stateVarSub = input-1 + ((i-1) * 128);
			makeString(tx$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //ON OFF
			processlogic();
		
			stateVarSub = stateVarSub + 16384;
			makeString(tx$, "\x8F\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", objectID$, chr(high(stateVarSub)), chr(low(stateVarSub))); //GAIN
			processlogic();	
			delay(5);
		}
		subscribe = 0;   
		xOKSubscribe = 1;
	}

}  


change input$
{
 	if(input$ > 0)
 		input = input$;
 	else       
 	{
 		input = 1;
 		print ("error input for the automixer cannot be 0. set to default of 1");
 	}
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE rx$
{
	if (xOK)
	{	
		xOK = 0;
		while (len(rx$))
		{         
			if(find("\x03\x03\x03\x03\x03", rx$))
			{ 
				tempString = remove("\x03\x03\x03\x03\x03", rx$);
				if ((mid(tempString, 6, 3) = "\x00\x00\x00") || (mid(tempString, 6, 3) = objectID$))
				{                               
					stateVarReceive = (byte(tempString, 9) * 256) + byte(tempString, 10);
					if ((stateVarReceive MOD 128) = input-1)
					{
						if (stateVarReceive < 16384)
						{                     
							if (byte(tempString, 14))
							{
								//output_mute_fb$[(stateVarReceive / 128) + 49] = 0;														
								output_mute_fb$[(stateVarReceive / 128) + 1] = 1;							
							}
							else
							{
								output_mute_fb$[(stateVarReceive / 128) + 1] = 0;							
								//output_mute_fb$[(stateVarReceive / 128) + 49] = 1;							
							}
						}   
						else
						{ 
							stateVarReceive = ((stateVarReceive - 16384) / 128) + 1;
							volumeOutput[x] = volumePercentToI(mid(tempString, 11, 4));
							output_gain_fb$[stateVarReceive] = volumeOutput[x];						
						}
					}
				}
				clearbuffer(tempString);					
			}    	
			
		}
		xOK = 1;
	}	
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{     
	INTEGER i;
	xOK = 1;
	subscribe = 0;  
	for(i = 1 to MAXOUTPUT)
	{
	 	xOkGain[i] = 1;
	} 
	xOKSubscribe =1;
}


